<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dom Lizarraga</title>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2024-03-09T21:37:25-08:00</updated>
  <subtitle>Rails, Ruby, Hotwire, webapps</subtitle>
  <icon>http://localhost:4000/css/favicon.png</icon>
  <id>http://localhost:4000/</id>
  <author>
    <name>Dom Lizarraga</name>
    <email>dominiclizarraga@hotmail.com</email>
  </author>
  
  <entry>
    <title>Apprenticeship Patterns üåå by David H. Hoover &amp; Adewale Oshineye.</title>
    <link href="http://localhost:4000/2023/09/22/apprenticeship-patterns.html"/>
    <updated>2023-09-22T00:00:00-07:00</updated>
    <id>http://localhost:4000/2023/09/22/apprenticeship-patterns</id>
    <content type="html">
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>The Minitest Cookbook by Chris Kottom</title>
    <link href="http://localhost:4000/2022/01/05/minitest_cookbook.html"/>
    <updated>2022-01-05T00:00:00-08:00</updated>
    <id>http://localhost:4000/2022/01/05/minitest_cookbook</id>
    <content type="html">&lt;p&gt;Today though, the separation between development and testing has largely disappeared - at least in the universe that most Ruby and Rails programmers occupy.&lt;/p&gt;

&lt;p&gt;In many if not most cases now, the one writing the code is also responsible for producing automated tests that cover the work
done. And while you‚Äôre probably sick of hearing it, this is a good thing for all kinds of reasons. Why?&lt;/p&gt;

&lt;p&gt;‚Ä¢ Tests demonstrate that your code actually works.
‚Ä¢ The pattern of thinking needed to write tests for code is very close to
that needed to design it.
‚Ä¢ Testing and developing in parallel tends to surface more bugs early in the development process when fixing them is cheap and easy.
‚Ä¢ Well-tested code tends to be better designed with reduced coupling and greater cohesion.
‚Ä¢ A good test suite acts as a detailed specification.
‚Ä¢ Writing tests during development increases programmer engagement and efficiency.
‚Ä¢ A test suite with good coverage aids in maintenance, refactoring, and upgrades with reduced risk of breakage and regression.
‚Ä¢ It‚Äôs faster to write code with tests than without.
‚Ä¢ Having automated tests reduces or removes the need for manual testing&lt;/p&gt;

&lt;p&gt;Best tests will have a few important characteristics in common:
‚Ä¢ Clarity: The name of each test suggests what it‚Äôs about at a glance.
‚Ä¢ Purpose: The intent and meaning of the test is obvious and unambiguous from the testing logic.
‚Ä¢ Eloquence: The test logic is expressed through fluent use of the language and the testing framework.
‚Ä¢ Readability: Tests are written and formatted in a way that promotes rapid discovery and comprehension.
‚Ä¢ Efficiency: All other things being equal, automated tests should use the minimum possible system resources&lt;/p&gt;

&lt;p&gt;Unlike a lot of books on testing, this one won‚Äôt dwell on the mechanics of test-driven development. TDD has become so prevalent and popular among the Ruby and Rails development community that you‚Äôd be hard pressed to find a book on testing or development that doesn‚Äôt take it as a starting point for everything taught. But TDD is primarily about development and only incidentally about testing, and it often treats the tests that fall out of it as a by-product rather than as first-class citizens of your project. That tends to result in test suites that are neglected after they‚Äôve served the purpose of driving out features.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Fact: The entire framework weighs in at less than 1600 lines of code. RSpec is almost 8 times as large. With a code base that size, the source practically becomes its own documentation.
‚Ä¢ Fact: Minitest has been singled out as a very readable project because it‚Äôs written in plain Ruby that developers of all experience
levels can dig into and understand.
‚Ä¢ Fact: The project has remained small and simple because of conscious decisions to keep it that way in spite of frequent requests
for expanded features.
‚Ä¢ Fact: The source code showcases Ruby‚Äôs power and elegance with great uses of closures, metaprogramming, concurrent programming, and others.
‚Ä¢ Fact: Since the Minitest framework also happens to be tested with Minitest, it includes some exceptional practical examples illustrating good testing technique&lt;/p&gt;

&lt;p&gt;To really get comfortable with Minitest‚Äôs internals, there are four basic abstractions that you‚Äôll need to understand: plugins, reporters, runnables and the Minitest runner.&lt;/p&gt;

&lt;p&gt;Plugins&lt;/p&gt;

&lt;p&gt;In Minitest, plugins are modules that extend or modify the behavior of Minitest. They can be used to add new features, customize the test runner, or modify the output of test results. Examples of plugins in Minitest include pride (a colorful test runner), parallel (for parallel test execution), and focus (to run specific tests or test suites).&lt;/p&gt;

&lt;p&gt;Minitest plugins are usually packaged as RubyGems which implement a simple framework-defined contract that allows them to be loaded an initialized by the framework. Specifically speaking, every plugin includes a loader file that follows a standard naming convention - ex: minitest/ foo_plugin.rb where foo is the name of the plugin.&lt;/p&gt;

&lt;p&gt;minitest-rails is a plugin for Minitest that adds some additional features for working with Ruby on Rails applications. It provides some additional test generators that can create test files for your Rails application‚Äôs models, controllers, views, and helpers. It also includes support for testing Rails-specific features like routes and controllers.&lt;/p&gt;

&lt;p&gt;In addition to the generators, minitest-rails also provides a Rails-specific test runner that sets up the Rails environment before running the tests. This can be helpful if your tests need to access Rails configuration or other Rails-specific features.&lt;/p&gt;

&lt;p&gt;Overall, minitest-rails is a helpful plugin for anyone working with Ruby on Rails applications and using Minitest as their testing framework.&lt;/p&gt;

&lt;p&gt;Another example: the minitest/pride plugin adds colorful output to your test results in the terminal.&lt;/p&gt;

&lt;p&gt;Reporters&lt;/p&gt;

&lt;p&gt;A test suite is a map for directing development effort to the parts of your project that need it. From this perspective, the results reported by your test suite act as its user interface and indicate the state of your code base.&lt;/p&gt;

&lt;p&gt;Each test Minitest runs passes a result to a Reporter object which is responsible for acting on it. Depending on the Reporter, it might:
‚Ä¢ Display information to the console.
‚Ä¢ Store the result for later processing.
‚Ä¢ Increment counters or compile statistics.
‚Ä¢ Send the result to another system - ex: a CI, a database, etc.&lt;/p&gt;

&lt;p&gt;As an abstraction, a Reporter is just an object that implements four methods that allow it to accept and operate on test results:
‚Ä¢ #start - called before the first test is run
‚Ä¢ #record - accept and process a single test result
‚Ä¢ #report - deliver a detailed report after the test run
‚Ä¢ #passed? - indicate passed/failed/errored/skipped tests&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_1.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;In Minitest, reporters are used to generate output of the test results. They provide various types of outputs such as progress bar, detailed documentation, and colorized output.&lt;/p&gt;

&lt;p&gt;Runnables&lt;/p&gt;

&lt;p&gt;In Minitest, runners are classes that run a set of tests.&lt;/p&gt;

&lt;p&gt;Assert-style tests and Spec-style tests are two different styles of writing tests in Minitest.&lt;/p&gt;

&lt;p&gt;Assert-style tests are based on assertions that verify the expected result of a test. They are usually written using methods such as assert, assert_equal, assert_match, etc. The focus is on verifying specific outcomes and behavior of the code being tested.&lt;/p&gt;

&lt;p&gt;Spec-style tests are based on specifying the expected behavior of a system or component. They are usually written using describe and it blocks that describe the behavior of the code being tested. The focus is on describing the behavior and intent of the code, rather than just verifying specific outcomes.&lt;/p&gt;

&lt;p&gt;Assert-style tests are based on the idea of making assertions about the state of the system under test. These tests usually follow the ‚ÄúArrange-Act-Assert‚Äù pattern, where the test sets up the system‚Äôs initial state, performs some action, and then makes one or more assertions about the system‚Äôs final state. (This uses instance methods starting with the string ‚Äútest_‚Äù).&lt;/p&gt;

&lt;p&gt;Spec-style tests, on the other hand, are based on the idea of describing the behavior of the system under test using a domain-specific language (DSL). In these tests, the focus is on describing what the system should do rather than how it should do it. Spec-style tests often use ‚Äúdescribe‚Äù and ‚Äúit‚Äù blocks to structure the test code.&lt;/p&gt;

&lt;p&gt;Both styles of testing have their pros and cons, and the choice of which one to use often comes down to personal preference and the requirements of the project. Some developers prefer the clarity and simplicity of Assert-style tests, while others find the expressiveness and readability of Spec-style tests to be more appealing. Ultimately, the most important thing is to choose a style that works for you and your team and allows you to write effective, maintainable tests.&lt;/p&gt;

&lt;p&gt;The Minitest Runner&lt;/p&gt;

&lt;p&gt;The Minitest Runner is the component responsible for running Minitest test suites. It loads the test files, executes the tests, and reports the results. By default, Minitest uses the Minitest::Runnable and Minitest::Test classes to define and run tests, respectively. However, the runner can be customized to use other classes or to change the way the tests are run. The runner is a key part of Minitest‚Äôs flexibility and extensibility.&lt;/p&gt;

&lt;p&gt;The runner and Runnables fit together like the layers of an onion where each layer represents a Ruby block or method. The inner layers represent the Runnables where the tests are actually executed, and the outer layers represent the runner - the code that gives the onion its shape.&lt;/p&gt;

&lt;p&gt;Minitest.run
Next, Minitest sets up the environment for the test run along with all the necessary supporting objects. All the framework‚Äôs major responsibilities are handled right here as it:
‚Ä¢ Parses the command line arguments.
‚Ä¢ Loads and initializes all detected Minitest plugins.
‚Ä¢ Instantiates and runs the reporters.
‚Ä¢ Runs tests by passing control on to the next layer.
‚Ä¢ Ensures that parallel worker threads are shut down gracefully.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Basic Recipes&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Problem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzz&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;FizzBuzz&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;Buzz&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
			&lt;span class=&quot;s2&quot;&gt;&quot;Fizz&quot;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Takeaways
You need four things to develop a Ruby project with Minitest:
‚Ä¢ Install Minitest as a project dependency with Bundler.
‚Ä¢ Create a test directory at test/ .
‚Ä¢ Create a test helper to include all global configuration and customization at test/test_helper.rb .
‚Ä¢ Create a new Rakefile or update the existing one with a Rake::TestTask configured to suit your needs (by convention to run tests you use the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rake&lt;/code&gt;)&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Writing Tests&lt;/p&gt;

&lt;p&gt;All the tests that we write follow the same basic four-phase structure.
	1. Setup the inputs and data objects prior to running the test.
	2. Exercise the logic under test.
	3. Verify that the tested code produces the expected results.
	4. Teardown or reset application state before running the next test.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;test_helper&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;fizz_buzz&apos;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzzTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt; 
		&lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_converts_multiples_of_fifteen_to_fizzbuzz&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# fb = FizzBuzz.new&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_converts_multiples_of_five_to_buzz&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# fb = FizzBuzz.new&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_converts_multiples_of_three_to_fizz&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# fb = FizzBuzz.new&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;# another example could have been assert &apos;Fizz&apos; == fb.convert(3)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_returns_same_number_for_other_numbers&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;101&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;101&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2014&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2014&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_2.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_3.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Another example of syntaxis:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArticleTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;TestCase&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;should not save article without title&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;article&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;assert_not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;article&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_4.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;That‚Äôs why many developers follow a strict one assertion per test policy - so that each assertion has exactly one chance to succeed or fail. It‚Äôs true that your tests will be better and more maintainable when each test verifies a single behavior of the system, but writing a single test for each of the assertions above seems like overkill to me since they‚Äôre all testing the same general behavior.&lt;/p&gt;

&lt;p&gt;setup runs before each test.
teardown runs after each test.&lt;/p&gt;

&lt;p&gt;It‚Äôs better to favor readability over DRY-ness when writing tests.&lt;/p&gt;

&lt;p&gt;Usage of skip&lt;/p&gt;

&lt;p&gt;Skip can be useful in situations where you want to write a test that specs out some future work that you‚Äôre not
quite ready to code just yet. For example, FizzBuzzTest doesn‚Äôt currently check to see what happens when we pass it an  unexpected input.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_raises_argument_error_for_bad_argument&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;skip&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;not yet implemented&apos;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;foo&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;assert_raises&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Takeaways
	‚Ä¢ Assert-style test cases are classes that inherit from Minitest::Test.
	‚Ä¢ Public instance methods of those classes whose names begin with test_ are treated as tests by the runner.
	‚Ä¢ Minitest provides a small set of assertions out of the box, and of those, about half are used frequently.
	‚Ä¢ Override the setup and teardown methods to include code that should be executed before or, respectively, after each test is
	executed.
	‚Ä¢ If you have to choose between readability and DRY-ness in your tests, you should almost always choose readability.&lt;/p&gt;

&lt;p&gt;Writing Specs&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FizzBuzzIterator&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@counter&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@fb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;test_helper&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;fizz_buzz_iterator&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;outputs sequential FizzBuzz values starting from 1 when initialized without a starting value&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;4&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;outputs sequential FizzBuzz values starting from the starting value when initialized with a starting value&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;11&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;13&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;14&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Other alternatives&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iteratory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;11&apos;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Assertion vs Expectation&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_5.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_6.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_7.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Like most powerful tools, this one can be abused. As a general rule, try to limit describe block nesting to at most two or three layers deep. More than that and the specs hard to follow and less readable for future developers (including future you).&lt;/p&gt;

&lt;p&gt;Before and After for Spec-Style&lt;/p&gt;

&lt;p&gt;before blocks for all enclosing scopes will be called before the test logic in order from outermost to innermost.&lt;/p&gt;

&lt;p&gt;after blocks for all enclosing scopes will be called after the test logic in order from innermost to outermost.&lt;/p&gt;

&lt;p&gt;In practical terms, this lets us define blocks with increasingly specific setup and teardown logic that cascade or override previous operations&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;test_helper&apos;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;fizz_buzz_iterator&apos;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;outputs sequential FizzBuzz values starting from 1&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;1&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;2&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;4&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	
	&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;when initialized with a starting value&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
			&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;outputs sequential FizzBuzz values starting from the starting value&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Buzz&apos;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;11&apos;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;Fizz&apos;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;13&apos;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;14&apos;&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;must_equal&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;FizzBuzz&apos;&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The let function provides an alternate and some would say more elegant way of setting up testing state with a more declarative syntax.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;FizzBuzzIterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Each call to let dynamically defines a new method with the specified name that executes the block argument upon the first invocation and caches the result for later access - in other words, a lazy initializer.&lt;/p&gt;

&lt;p&gt;Takeaways&lt;/p&gt;

&lt;p&gt;‚Ä¢ Create a new test case in Minitest::Spec using a top-level describe block with a String or Class argument.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Define a test using an it block with a descriptive String passed as a parameter.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Make assertions on the values of expressions by wrapping them in a Minitest::Expectation object using expect or one of its aliases.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Use nested describe blocks to define scopes within a test case as a way of grouping related tests.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Implement before and after blocks for shared setup and teardown logic specific to a block context.&lt;/p&gt;

&lt;h2 id=&quot;-create-named-lazy-initializers-using-let-blocks&quot;&gt;‚Ä¢ Create named lazy initializers using let blocks.&lt;/h2&gt;

&lt;p&gt;Configure Pre-Test State&lt;/p&gt;

&lt;p&gt;As explained back in Writing Tests, each test run under Minitest follows a common progression of steps: Setup, Exercise, Verify, and Teardown. Of these, Setup usually accounts for more lines of code and can be the toughest for new developers to understand. There are several options for setting the state, and knowing which one is the best fit requires familiarity with all of them.&lt;/p&gt;

&lt;p&gt;Method 1: Set up the same state before each test.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_8.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Method 2: Configure different state before each test.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_9.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Method 3: Using a memoized helper method.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_10.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Method 4: Create data objects within the test.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_11.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Collections&lt;/p&gt;

&lt;p&gt;Enumerable types where order doesn‚Äôt matter like Hash and Set count two instances as being equal if they contain the same elements regardless of the order in which the elements were added or passed during initialization.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_12.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Relations (active record)&lt;/p&gt;

&lt;p&gt;Just as with Arrays though, order matters, so you‚Äôll need to ensure that both the actual and the expected values are sorted the same way when performing comparisons.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_13.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;ActiveRecord::Relation objects compare mostly like Arrays except when compared with others of the same type, and then according to the SQL representation.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_14.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Dates and Times&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/cook_book_16.png&quot; alt=&quot;beginning_rails&quot; style=&quot;width:500px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Intermediate Recipes&lt;/p&gt;

&lt;p&gt;Mocks:  mocks test the behavior of an object toward the objects to which it sends messages.&lt;/p&gt;

&lt;p&gt;Use mocks sparingly and only after careful consideration. The more collaborators you mock, the greater your risk of false positives.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Only mock what you own. If you don‚Äôt own it, the API could change, and you‚Äôd never detect it in your tests.
‚Ä¢ Only mock immediate collaborators and avoid deep mocking (mocks returning mocks returning mocks).
‚Ä¢ Ideally, only use mocks to solve specific difficult problems like:
‚ó¶ Connecting to unreliable or uncontrollable external resources
‚ó¶ Real object performance is prohibitively slow
‚ó¶ Expensive setup and/or configuration
‚ó¶ Avoiding other undesirable side effects&lt;/p&gt;

&lt;p&gt;Stubs
Stubs provide the context needed to fully exercise an object through a given test scenario&lt;/p&gt;

&lt;p&gt;‚Ä¢ Use stubs wherever and whenever they‚Äôre needed, but recognize that needing too many is probably a code smell.
‚Ä¢ Don‚Äôt use stubs where they‚Äôre not needed, and apply them as narrowly as possible where you do use them. (See Mocha‚Äôs stub_everything and any_instance.stub as prime examples of mocking framework features promoting bad coding practices.)
‚Ä¢ Never ever, ever stub the object under test. More often than not, you‚Äôll end up testing the stub and not the object itself.&lt;/p&gt;

&lt;p&gt;Fake Objects&lt;/p&gt;

&lt;p&gt;A fake is an alternate version of a given class intended for testing only. It exposes an interface resembling that of the real thing it replaces but with an implementation that‚Äôs either simplified or hollowed out which allows
them to:
‚Ä¢ Capture and verify interactions between the object under test and the fake object (like a mock).
‚Ä¢ Maintain consistent interactions between the object under test and the fake object (like a stub).
‚Ä¢ Avoid resource-intensive or otherwise undesirable processing (like both mocks and stubs).&lt;/p&gt;

&lt;p&gt;We could have gotten the same result using mocking or stubbing, but it might have taken many more lines of setup code. A fake can be a great fit when dealing with complex APIs since it comes ready-made and pre-programmed with the behavior we want and need for running our tests.&lt;/p&gt;

&lt;p&gt;Testing Mixin Behavior&lt;/p&gt;

&lt;p&gt;Testing something that can‚Äôt be instantiated on its own confuses many developers.&lt;/p&gt;

&lt;p&gt;two types of mixins:&lt;/p&gt;

&lt;p&gt;Those that are coupled with the classes that include them, and those that aren‚Äôt (non-coupled modules)&lt;/p&gt;

&lt;p&gt;Takeaways&lt;/p&gt;

&lt;p&gt;‚Ä¢ Use Object#extend to patch a mixin‚Äôs method into a simple Object for easy testing.
‚Ä¢ Try mixing into a Ruby Struct in cases where you need the including class to have some specific attributes or behavior of its own.&lt;/p&gt;

&lt;p&gt;Sharing Code Between Tests&lt;/p&gt;

&lt;p&gt;One point that should be clear to you by now is this: a self-contained test is a readable test. Minitest provides a nice, narrow vocabulary for writing tests, and when we stick to that vocabulary, life becomes better for the developers that follow.&lt;/p&gt;

&lt;p&gt;When it comes to organizing tests:
‚Ä¢ Extracting code into a new helper methods
‚Ä¢ Extracting helper methods into a new module
‚Ä¢ Extracting tests into a new module&lt;/p&gt;

&lt;p&gt;Extracting helper methods by:
‚Ä¢ Using descriptive names for helper methods and variable arguments
‚Ä¢ Updating the extracted code to ensure that it‚Äôs still comprehensible, even outside the previous context&lt;/p&gt;

&lt;p&gt;Takeaways&lt;/p&gt;

&lt;p&gt;‚Ä¢ Code shared within a single test case can be extracted to a private helper method in the same class.
‚Ä¢ Code shared across multiple test cases can be extracted to a module that may be included in all.
	‚ó¶ Sharing tests between test cases is a special case of this&lt;/p&gt;

&lt;p&gt;Managing Test Data&lt;/p&gt;

&lt;p&gt;‚Ä¢ Whenever persistence isn‚Äôt important to your test, use Object.new to create a new instance.
‚Ä¢ Rails fixtures have a lot going for them including great performance and a reliable set of known models for your tests.
‚Ä¢ Use both functional and memorable names for your fixtures.
‚Ä¢ Configure your fixtures carefully, and try to cover at least:
‚ó¶ One minimal valid configuration
‚ó¶ One or two realistic models
‚ó¶ Other well-defined object states
‚Ä¢ Use advanced ERB and YAML features to define fixtures dynamically.&lt;/p&gt;

&lt;p&gt;Testing Active Record Models&lt;/p&gt;

&lt;p&gt;Active Record maps the application database to Ruby objects that manage attributes, relationships, queries, and lifecycle methods among other things.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Test public methods, not private ones.
‚Ä¢ Test interfaces, not implementations.
‚Ä¢ Don‚Äôt test Active Record (or the rest of Rails, for that matter).
‚Ä¢ You need to test some of the typical aspects of Active Record models:
	‚ó¶ Complex validations
	‚ó¶ Scopes
	‚ó¶ Callback targets and hooks
‚Ä¢ Make assertions about the results and side effects of public instance methods.
‚Ä¢ Make (selective) assertions an object‚Äôs behavior toward collaborators.&lt;/p&gt;

&lt;p&gt;Testing Controllers&lt;/p&gt;

&lt;p&gt;There‚Äôs been a faction of the Rails community that has become vocal about skipping controller testing completely. They usually argue that simulating more realistic user interactions eliminates the need for more focused controller tests which tend to be very repetitive and dull to write anyway. Even the core team has started a gradual move away from controller testing.&lt;/p&gt;

&lt;p&gt;‚ó¶ Controller tests should include assertions for the visible side effects that controller actions produce including:
	‚ó¶ HTTP response code
	‚ó¶ Redirect location
	‚ó¶ System state changes (models created, updated, or destroyed)
	‚ó¶ Flash variables, session variables, and cookies set or changed
‚Ä¢ You should write tests for complex or generated routes.
‚Ä¢ Controllers should specifically not make assertions about any of the following:
	‚ó¶ Rendered templates
	‚ó¶ Instance variables passed to the view&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Refactoring by Jay Fields, Shane Harvie, Martin Fowler &amp; Kent Beck.</title>
    <link href="http://localhost:4000/2021/09/25/refactoring.html"/>
    <updated>2021-09-25T00:00:00-07:00</updated>
    <id>http://localhost:4000/2021/09/25/refactoring</id>
    <content type="html">&lt;p&gt;This book will take you from beginner to advanced in terms of refactoring.&lt;/p&gt;

&lt;p&gt;It‚Äôs recommended to have prior knowledge of either  one Object Oriented language or Ruby however the Ruby language is very idiomatic so you don‚Äôt need to have a deep understanding of it in order to identify what is the author trying to teach.&lt;/p&gt;

&lt;p&gt;Firstly let‚Äôs bring up what ‚ÄúRefactoring‚Äù means:&lt;/p&gt;

&lt;p&gt;Verb: To restructure software by applying a series of refactorings without changing its observable behavior.&lt;/p&gt;

&lt;p&gt;Noun: A change made to the internal structure of software to make it easier to understand and cheaper to modify without changing its observable behavior.&lt;/p&gt;

&lt;p&gt;The book has around 70 examples of how you can clean your code up and some others well known ‚Äúgood practices‚Äù. What are the main benefits of doing it and also it considers its downsides so that you can see the whole picture, bearing in mind that the code you write today must be easy to understand and even change tomorrow.&lt;/p&gt;

&lt;p&gt;The first chapter begins with a good example of a Movie theater system, on the left side you may find some spaghetti code and on the right the code after applying some refactoring twists.&lt;/p&gt;

&lt;p&gt;Also, he brings some step by step methodology which consists in small changes, test, another small change, test in order to make sure nothing has been broken. He gives you a brief example and then provides a small image, the motivation, the mechanics and the example.&lt;/p&gt;

&lt;p&gt;For visual learners, the book has plenty of diagrams, before the Refactoring and after so you can see how a requests is sent from the user/browser and pass through different methods and by doing that you may see how an object is modified and what methods intervene and also how clean is the new diagram.&lt;/p&gt;

&lt;p&gt;There is a section called ‚ÄúTip‚Äù where the author gives you some advices in order to perform better; this is the first:&lt;/p&gt;

&lt;p&gt;When you find you have to add a feature to a program, and the programs code is not structured in a convenient way to add the feature, first refactor the program to make it easy to add the feature, then add the feature.&lt;/p&gt;

&lt;p&gt;He goes over about the ROI (return of investment), the technical debt, how to manage it in the case we have tight deadlines and how much we should invest in order to write good code in the first attempts.&lt;/p&gt;

&lt;p&gt;Notes.&lt;/p&gt;

&lt;p&gt;Instance methods should not be too long nor does too much. Even if it works, it‚Äôs until we want to change the system when we notice there‚Äôs a bad smell.&lt;/p&gt;

&lt;p&gt;Code is written by humans and humans need to understand it also care about it.&lt;/p&gt;

&lt;p&gt;A poorly design system is hard to change. If it‚Äôs hard to figure out what to change is very likely that programmer will make a mistake and introduce bugs.&lt;/p&gt;

&lt;p&gt;The only guarantee you‚Äôre going to have is that they will change it again within six months.&lt;/p&gt;

&lt;p&gt;The first to refactor is always the same. I need to build a solid set of tests for that section of code.&lt;/p&gt;

&lt;p&gt;Decomposing and Refactoring the Statement Method&lt;/p&gt;

&lt;p&gt;I am looking to decompose the method into smaller pieces. Smaller pieces of code tend to make things more manageable. They are easier to work and to move around.&lt;/p&gt;

&lt;p&gt;My first step is to find a logical clump of code and use Extract Method.&lt;/p&gt;

&lt;p&gt;When I extract, I need to know what could go wrong. If I take a larger piece, I can introduce a bug into the program. So before doing it try to figure out how to do it safely.&lt;/p&gt;

&lt;p&gt;Any non modified variable can be passed as parameter. Modified variables need more care.&lt;/p&gt;

&lt;p&gt;Never be afraid to change names of things to improve clarity.&lt;/p&gt;

&lt;p&gt;Good programmers write code that humans can understand.&lt;/p&gt;

&lt;p&gt;In most cases a method should be on the object whose data it uses.&lt;/p&gt;

&lt;p&gt;While Refactoring you should focus on clarity, and then later focus on performance as a separate activity.&lt;/p&gt;

&lt;p&gt;Replacing the Conditional Logic with Polymorphism. If you must use a case statement should be your own data, not on someone else‚Äôs.&lt;/p&gt;

&lt;p&gt;Using subclasses, we can get rid of the case statement using Polymorphism. Example: Movie (as main class) then subclasses: RegularMovie, Children‚ÄôsMovie and NewMovie.&lt;/p&gt;

&lt;p&gt;An object cannot change its class during its lifetime.&lt;/p&gt;

&lt;p&gt;All these lead to better-distributed responsibilities and code that is easier to maintain.&lt;/p&gt;

&lt;p&gt;The purpose of refactoring is to make software easier to understand and modify.&lt;/p&gt;

&lt;p&gt;You can make many changes in software that make little or no change in the observable behavior. It only alters the internal structure.&lt;/p&gt;

&lt;p&gt;Any user, whether an end user or another programmer, cannot tell that things have changed.&lt;/p&gt;

&lt;p&gt;The two hats by Kent Beck. When you add a function, you should not modify existing code, you‚Äôre just adding new features (hat #1), on the other hand when you are refactoring, you should not add code, just 
restructure the code (hat #2).&lt;/p&gt;

&lt;p&gt;Refactoring is not the silver bullet for all software development issues.&lt;/p&gt;

&lt;p&gt;Loss of the structure of code has a cumulative effect. The harder it‚Äôs to see the design in the code, the harder it‚Äôs to preserve it.&lt;/p&gt;

&lt;p&gt;Refactoring helps you spot bugs.&lt;/p&gt;

&lt;p&gt;When I‚Äôm studying code, I find Refactoring leads me to higher levels of understanding that otherwise I would miss.&lt;/p&gt;

&lt;p&gt;You don‚Äôt decide to refactor, you refactor because you want to do something else, and refactoring helps you do that other thing.&lt;/p&gt;

&lt;p&gt;I ask myself if I can refactor the code to make that understanding more immediately apparent. Then I refactor it.&lt;/p&gt;

&lt;p&gt;The other driver of Refactoring is a design that does not help me add a feature easily&lt;/p&gt;

&lt;p&gt;Developers often to both things, to remove existing pain points and experiment with new solutions.&lt;/p&gt;

&lt;p&gt;When developers have a deeper understanding of the code base they can ne more effective at adding to it and suggesting how to improve it.&lt;/p&gt;

&lt;p&gt;Refactoring tends to break big objects and big methods into several smaller ones.&lt;/p&gt;

&lt;p&gt;When shouldn‚Äôt you refactor?&lt;/p&gt;

&lt;p&gt;A compromise route is to refactor a large piece of software into components with strong encapsulation.&lt;/p&gt;

&lt;p&gt;Then you can make a refactor-versus-rebuild decision for one component at a time.&lt;/p&gt;

&lt;p&gt;Another time you should avoid refactoring is when you are close to a deadline. At that point the productivity gain from refactoring would appear after the deadline and thus be too late.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/refactoring_photo.jpeg&quot; alt=&quot;beginning_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;With refactoring the emphasis changes. You still do up-front design, but now you don‚Äôt try to find the perfect solution. You may find that the solution is different from the one you previously came up.&lt;/p&gt;

&lt;p&gt;Always look for flexible solutions.&lt;/p&gt;

&lt;p&gt;Refactoring can lead to simpler designs without sacrificing flexibility.&lt;/p&gt;

&lt;p&gt;The secret to fast software is to write tunable software first and then to tune it for sufficient speed.&lt;/p&gt;

&lt;p&gt;Since the early days of programming people have realized that the longer a procedure is, the more difficult it is to understand.&lt;/p&gt;

&lt;p&gt;If you have a good name for a method, you should not look at the body.&lt;/p&gt;

&lt;p&gt;Ninety-nine percent of the time, all you have to do to shorten a method is Extract method. Find the parts of the method that seem to go nicely together and make a new method.&lt;/p&gt;

&lt;p&gt;A block of code with a comment that tells you what it is doing can be replaced by a method whose name is based on the comment.&lt;/p&gt;

&lt;p&gt;When a class is trying to do too much, it often shows up as too many instance variables. When a class has too many instances variables, duplicated code cannot be far behind.&lt;/p&gt;

&lt;p&gt;As with a class with a huge wad of variables, the usual solution for a class with too much code is either to&lt;/p&gt;

&lt;p&gt;Extract class, Extract module or extract subclass. A Useful trick is to determine how clients use the class 
and to use the Extract module for each of these uses. That may give you ideas of how you can break up the class.&lt;/p&gt;

&lt;p&gt;A class smell is a method that seems more interested in a class other than the one it actually is in.&lt;/p&gt;

&lt;p&gt;You can shrink a lot of parameter lists and simplify method calling.&lt;/p&gt;

&lt;p&gt;Bunches of data that hang around together really ought to be made into their own object.&lt;/p&gt;

&lt;p&gt;Most times when you see a case statement it may be replaced by Polymorphism.&lt;/p&gt;

&lt;p&gt;Each class you create costs money to maintain and to understand. A class that isn‚Äôt doing enough to pay for itself should be eliminated.&lt;/p&gt;

&lt;p&gt;Inheritance often leads to over-intimacy.&lt;/p&gt;

&lt;p&gt;One of the prime features of Objects is encapsulation ‚Äì hiding internal details form the rest of the world.&lt;/p&gt;

&lt;p&gt;Comments are used as deodorant to somehow mask the bad smell.&lt;/p&gt;

&lt;p&gt;If you want to refactor, the essential precondition is having solid tests.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt write self-testing code, you‚Äôll end up spending most time debugging.&lt;/p&gt;

&lt;p&gt;When you get a bug report, start by writing a unit test that exposes the bug.&lt;/p&gt;

&lt;p&gt;Write isolated tests that do not depend on each other.&lt;/p&gt;

&lt;p&gt;You should concentrate on where the risk is. Look at the code and see where it becomes more complex.&lt;/p&gt;

&lt;p&gt;I emphasize the safe way of doing the refactoring, which is to take small steps and test after every one.&lt;/p&gt;

&lt;p&gt;A large part of refactoring is composing methods to package code properly. Almost all the time the problems come from methods that are too long.&lt;/p&gt;

&lt;p&gt;Long methods are troublesome because they often contain a lot of information which gets buried by the complex logic that usually gets dragged in.&lt;/p&gt;

&lt;p&gt;The key refactoring is Extract method, which takes a clump of code and turns it into its own method.&lt;/p&gt;

&lt;p&gt;Inline method which does the opposite.&lt;/p&gt;

&lt;p&gt;I prefer short, well-named methods.&lt;/p&gt;

&lt;p&gt;It increases the chances that other methods can use a method and also allows you to read from a higher 
level as a series of comments.&lt;/p&gt;

&lt;p&gt;Comments often identify pieces of a method that can be extracted.&lt;/p&gt;

&lt;p&gt;In such situation temporary variables can be helpful to break down the expression into something more manageable.&lt;/p&gt;

&lt;p&gt;The difficulty in decomposing a method lies in local variables.&lt;/p&gt;

&lt;p&gt;Refactoring can break down something complex into simpler pieces, but sometimes you just reach the point at which you have to remove the whole algorithm and replace it with something simpler.&lt;/p&gt;

&lt;p&gt;Moving methods is the bread and butter of refactoring. I move methods when classes have too much behavior or when classes are collaborating too much and are highly coupled.&lt;/p&gt;

&lt;p&gt;I consider moving a field if I see more methods on another class using the information in the field than the class itself.&lt;/p&gt;

&lt;p&gt;You‚Äôve Probably heard that a class should be a crisp abstraction, handle a few clear responsibilities, or some similar guideline.&lt;/p&gt;

&lt;p&gt;You need to consider where it can be split, and you split it. A good sign that a subset of the data and a subset of the methods seem to go together. Other good signs are subsets of data that usually change together or are particularly dependent on each other.&lt;/p&gt;

&lt;p&gt;One of the keys, if not the key; to objects is encapsulation. Encapsulation means that object need to know less about other parts of the system.&lt;/p&gt;

&lt;p&gt;A class is doing too much, remove the middleman with method delegation.&lt;/p&gt;

&lt;p&gt;Each object stands for one object in the real world.&lt;/p&gt;

&lt;p&gt;Having many two-way links also makes it easy for mistakes to lead to zombies: objects that should be dead but still hang around because of a reference that was not cleared.&lt;/p&gt;

&lt;p&gt;Replacing case-like or conditional statements with Polymorphism involves blowing away the original class and replacing it with a new class for each type code.&lt;/p&gt;

&lt;p&gt;If the original class has a large chunk of code that doesn‚Äôt use the type code, I choose either Replace Type code with Module Extension or Replace Type code with State/Strategy.&lt;/p&gt;

&lt;p&gt;Replace Type code with Module Extension aims to remove conditional logic. Both the original class and the module that is being extended can access the same instance variables.&lt;/p&gt;

&lt;p&gt;Modules cannot be unmixed easily.&lt;/p&gt;

&lt;p&gt;When the code is changed at the runtime and the type changes are complex enough that I cant get away with Module Extension I use State/Strategy.&lt;/p&gt;

&lt;p&gt;I often find conditionals expressions come in two forms. The first form is a check where either course is part of the normal behavior. The second is a form situation in which one answer from the conditional indicates normal behavior and the other indicates an unusual condition.&lt;/p&gt;

&lt;p&gt;You have a conditional that chooses different behavior depending on the type of an object.&lt;/p&gt;

&lt;p&gt;One of the grandest sounding words in object jargon is polymorphism. The essence of polymorphism is that it allows you to avoid writing an explicit conditional when you have objects whose behavior varies depending on their types.&lt;/p&gt;

&lt;p&gt;You can achieve polymorphism in two ways in Ruby, one by implementing the same method signature on multiples objects and call these methods polymorphically and the second by introducing inheritance hierarchy and have the method that is to be called polymorphically on the subclasses.&lt;/p&gt;

&lt;p&gt;The essence of polymorphism is that instead of asking an object what type it is and the invoking some behavior based on the answer you just invoke the behavior.&lt;/p&gt;

&lt;p&gt;An assertion technique is a conditional statement that is assumed to be always true.&lt;/p&gt;

&lt;p&gt;Goal of interface is to show only what they have to and no more.&lt;/p&gt;

&lt;p&gt;Remember your code is for a human first and a computer second.&lt;/p&gt;

&lt;p&gt;Methods should be named in a way that communicates their intention. A good way to do this is to think about the comment you would use to describe the method and turn that comment into the name of the method.&lt;/p&gt;

&lt;p&gt;A good rule to follow is to say that any method that returns a value should not have observable side effects.&lt;/p&gt;

&lt;p&gt;If you come across a method that returns a value that is used by the caller and also has side effects, you should try to separate the query from the modifier.&lt;/p&gt;

&lt;p&gt;There are two motivations here for using Replace Constructor with Factory Method. The first comes about if we need to perform this construction login in more than one place. And the second motivation is encapsulation.&lt;/p&gt;

&lt;p&gt;Exceptions are better because they clearly separate normal processing form error processing.&lt;/p&gt;

&lt;p&gt;A module should have one single responsibility, just like a class.&lt;/p&gt;

&lt;p&gt;A module that is difficult to name with the words ‚Äúhelper‚Äù or ‚Äúassistant‚Äù is probably doing too much.&lt;/p&gt;

&lt;p&gt;The main trigger for use of Extract Subclass is the realization that a class has behavior used for some instances of the class and not for others.&lt;/p&gt;

&lt;p&gt;A Ruby Class can only inherit from one superclass directly. If you want the class to vary in several different ways, you have to use delegation or module extension for all but one of them.&lt;/p&gt;

&lt;p&gt;Notice that the implementation using extension of modules is similar to the inheritance example. So why use extend instead of inheritance? The answer is that you would use extend if the modules you were creating could be used to extend various classes.&lt;/p&gt;

&lt;p&gt;By using delegation instead, you make it clear that you are making only partial use of the delegated class.&lt;/p&gt;

&lt;p&gt;Book examples: https://github.com/DominicLizarraga/refactoring_ruby_edition&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>The Well-Grounded Rubyist by David A. Black &amp; Joseph Leo III.</title>
    <link href="http://localhost:4000/2021/06/15/well_grounded_rubyist.html"/>
    <updated>2021-06-15T00:00:00-07:00</updated>
    <id>http://localhost:4000/2021/06/15/well_grounded_rubyist</id>
    <content type="html">&lt;p&gt;The book is on its 3rd edition and it‚Äôs comprised of 3 parts and 16 chapters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ruby foundations: (chapters 1-6)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The syntax is introduced, key concepts and semantics that Ruby uses, also the construction of objects, classes, modules and identifiers, code conventions, also, how to execute files from the console, how to use Gem files and finally using the Ruby interpreter (irb).&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Built-in Classes and methods: (chapters 7-12)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most used built-in classes, including: String, Array, Hash, Numeric, Range, Date, Time and Regular Expressions are presented with many examples, what should you expect out of it? How to use it? How the Boolean logic works. The book has a very digested way of reading how the code is flowing, it has a numerical series where you can read from 1 to 12, step by step, line by line so that you can see how the program reads variables, re-assign them and lastly how the output reached that level, instead of jumping from one line to another.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ruby dynamics (chapters 12-16)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here you will find the metaprogramming basics, as well as handlers for non-existing methods, how to catch up those exceptions, callbacks, hook messages and finally a functional programming example.&lt;/p&gt;

&lt;p&gt;Notes.&lt;/p&gt;

&lt;p&gt;false and cause I conditional expression to evaluate as false; all other objects including true, of course, but also including 0 an ‚Äúempty strings‚Äù caused it to evaluate to true .&lt;/p&gt;

&lt;p&gt;Variables types: locals, instance, class, global.&lt;/p&gt;

&lt;p&gt;Every object is capable of understanding a certain set of messages. Each message that an object understands corresponds directly to a- method, a name, executable routine whose execution the object has the ability to trigger.&lt;/p&gt;

&lt;p&gt;A class defines an object functionality, and every object is an instance of exactly one class period every time you create a string object, you have created an instance of the class string.&lt;/p&gt;

&lt;p&gt;Although every object is an instance of a class, the concept of class is less important than the concept of object. That‚Äôs because objects can change acquiring methods and behaviors that were not defined in their class period the class is responsible for launching object into existence, a process known as instantiation, but they‚Äôre after the object has a life of its own.&lt;/p&gt;

&lt;p&gt;The ability of objects to adopt behaviors that their class did not give them is one of the most central defining principles of design of Ruby as a language.&lt;/p&gt;

&lt;p&gt;Rather than asking in the abstract weather a = b, you ask whether it considers itself equal to B. If you want to know whether a given student is taking a class from a given teacher, you ask the student, are you student of this teacher ?&lt;/p&gt;

&lt;p&gt;There is room for debate as to whether this or that programming language, or even these or that kind of programming language, corresponds more closely than others to shape of the real world. A lot depends on how you perceive the world. Do you perceive it as people with things, each of which has task to do and waits for someone to request the task? If so, you may conclude that object oriented languages model the world best. Do you see life as a series of to-do items on a checklist, to be gone through in order? If so, you may see a strictly procedural programming language as having closer ties to the characteristics of the real world. In short there is no answer to the question of what the real world is.
Designing object oriented software is largely a matter of figuring out what you want your objects to be: what they should do, how they will interact with each other, how many of each there should be . For example, many students, one register. And other such questions.&lt;/p&gt;

&lt;p&gt;To get an object to talk, you have to ask it to talk. But before you ask it to talk, you have to teach it how to talk.&lt;/p&gt;

&lt;p&gt;It‚Äôs all about asking objects to do things and tell you things.
respond_to? is an example of introspection or reflection.&lt;/p&gt;

&lt;p&gt;Keywords are special reserved words that you cannot use as variable names. For example def is a keyword ; The only thing you can use it for is to start a method definition.&lt;/p&gt;

&lt;p&gt;Defining a class lets you group behaviors (methods) into convenient bundles, so that you can quickly create many objects that behave essentially the same way . You can also add methods to individual objects, if that‚Äôs appropriate for what you are trying to do in your program. But you don‚Äôt have to do that with every object if you model your domain into classes.&lt;/p&gt;

&lt;p&gt;A typical class consists of a collection of methods definition. Classes usually exist for the purpose of being instantiated that is, of having objects created instances of that class period
Movies about objects, and objects are instances of classes.
The instance variable enables individual objects to remember state. Instance variables work much like other variables: you assign values to them, and you read those values back; You can add them together, print them out, and so on pivot but instance variables have a few differences:&lt;/p&gt;

&lt;p&gt;‚Ä¢ Always start with a single @&lt;/p&gt;

&lt;p&gt;‚Ä¢ Are only visible to the object to which they belong&lt;/p&gt;

&lt;p&gt;‚Ä¢ Instance variable initialized in one method inside a class can be used by any instance method defined within that class.&lt;/p&gt;

&lt;p&gt;An attribute is a property of an object whose value can be read and or written through the object.&lt;/p&gt;

&lt;p&gt;Every Ruby class can have only one superclass, in keeping with the principle of single inheritance.&lt;/p&gt;

&lt;p&gt;Ruby provides modules, which art bundles of programming functionality similar to classes (except that they don‚Äôt have instances), that you can easily graft onto your class family tree to provide as many methods for your objects as you need. Your line the idea of a class method is that you send a message to the object that‚Äôs the class rather than the one of the class instances.&lt;/p&gt;

&lt;p&gt;Like classes, modules are bundles of methods and constants. Unlike classes, models don‚Äôt have instances; Instead, you specify that you want to add the functionality of a particular module to that of a class or a specific object.&lt;/p&gt;

&lt;p&gt;No class can inherit from more than one class. In cases where you want numerous extra behaviors for a class instances and you don‚Äôt want to stash them all in the class superclass and its ancestral classes, you can use modules to organize your code in a more granular weight.&lt;/p&gt;

&lt;p&gt;When you are designing a program and you identify a behavior or set of behaviors that may be exhibited by more than one kind of entity or object, you have found a good candidate for a module.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/rubyist.jpeg&quot; alt=&quot;beginning_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;The practice of arranging objects that talk to one another in a complete program is called object-oriented design. You learn in chapter 3 that you define a method twice inside the same class, the second definition takes precedence over the first.&lt;/p&gt;

&lt;p&gt;If the object‚Äôs method lookup path includes two or more same name methods, the first one encounter is the winner and is executed.&lt;/p&gt;

&lt;p&gt;Include will make a module‚Äôs methods available as instance method. extend on the other hand, will make a modules method available as class methods.
The kernel module provides an instance method called _missing. This method is executed whenever an object receives a method that it does not know how to respond to that is, a message that does not match a method anywhere in the object‚Äôs method look-up path.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Modules don‚Äôt have instances. It follows that entities or things are generally best modeled in classes, while characteristics, shared behaviors, and properties of entities or things are best encapsulated in modules.&lt;/p&gt;

&lt;p&gt;‚Ä¢ A class can have only one superclass, but it means in as many modules as it wants. If you are using inheritance, give priority to create a sensible superclass/subclass relationship.&lt;/p&gt;

&lt;p&gt;To know which object itself, you need to know what context you are in. In practice, there are not many contexts to worry about. There is the top level ( before you have entered or after you have left any other context, such as a class definition). There are class definition blocks, model definition blocks, and method definition blocks.&lt;/p&gt;

&lt;p&gt;It‚Äôs all about self switching from one object to another, which it does when you enter a class or module definition, an instance method definition, or a Singleton method (including class method) definition.
As soon as you cross a class or module keyword boundary , the class or module whose definition block you‚Äôve entered ‚Äì the Class or Module object becomes self.&lt;/p&gt;

&lt;p&gt;A simple rule governs instance variables and their resolution: every instance variable you will ever see in a Ruby program belongs to whatever object is the current object (self) at that point in the program.
Using global variables tends to end up being a substitute for solid, flexible program design , rather than contributing to it.&lt;/p&gt;

&lt;p&gt;One of the main points of object oriented programming is that data and actions are encapsulated in objects. You are supposed to have to query objects for information and to request that they perform actions.&lt;/p&gt;

&lt;p&gt;And objects are supposed to have a certain privacy. When you ask an object to do something, you are not supposed to care what the object does internally to get the job done. Even if you yourself wrote the code for the objects method, when you send the object a message, you treat the object as a black box that works behind the scenes and provides a response.&lt;/p&gt;

&lt;p&gt;Global variables these sort the landscape by providing a layer information shared by every object in every context.&lt;/p&gt;

&lt;p&gt;Globally scoped data is fundamentally in conflict with the object oriented philosophy of endowing objects with abilities and then getting things done by sending request to those objects.&lt;/p&gt;

&lt;p&gt;Every definition block whether for a class, a model, a method, starts a new local scope, a new local variable, scratch pad, and get its own variable.&lt;/p&gt;

&lt;p&gt;At its simplest, idea behind a class variable is that it provides a storage mechanism that‚Äôs shared between a class and instance of that class, and that‚Äôs not visible to any other objects. No other entity can fill this role. Local variables don‚Äôt survive the scope change between class definition and their inner method definition. Globals do but they are also visible and mutual everywhere else in the program someone not just in one class.&lt;/p&gt;

&lt;p&gt;So class variables have a niche to feel: visibility to a class and its instances, and to no one else.&lt;/p&gt;

&lt;p&gt;The main business of Ruby program is to send messages to objects. And the main business of an object is to respond to messages. Sometimes, and object wants to be able to send itself messages that it does not want anyone else to be able to send it. For this scenario, Ruby provides the ability to make a method private.&lt;/p&gt;

&lt;p&gt;If you don‚Äôt use an explicit receiver for a method call, Ruby assumes that you want to send the message to the current object , self.
Ruby control flow techniques include the following:&lt;/p&gt;

&lt;p&gt;Conditional execution. Execution depends on the truth of an expression.&lt;/p&gt;

&lt;p&gt;Looping. A single segment of code is executed repeatedly&lt;/p&gt;

&lt;p&gt;Iteration. a call to a method is supplemented with a segment of code that the method can call one or more times during its own execution.&lt;/p&gt;

&lt;p&gt;Exceptions. Error conditions are handled by special control for rules.&lt;/p&gt;

&lt;p&gt;After all, when you call a method on an object, control is passed to the body of the method ( 8 different scope); And when the method has finished executing, control returns to the point right after the point where the method call took place.&lt;/p&gt;

&lt;p&gt;The difference between a method call with a block and a method call 
without a block comes down to whether or not the method can deal. If there is a block, then it can; If not it cannot, because there is nothing to deal to.&lt;/p&gt;

&lt;p&gt;An Exception is a special kind of object, an instance of the class exception or a descendant of that class period raising an exception means stopping normal execution of the program and either dealing with the problem that‚Äôs being encountered or existing the program completely.&lt;/p&gt;

&lt;p&gt;It‚Äôs generally considered good practice to catch a specific exceptions rather than simply using rescue to catch all exceptions.&lt;/p&gt;

&lt;p&gt;ensure clause is executed whether an exception is raised or not. In short it is packed to begin/end structure of which it is a part, and its execution is unconditional.&lt;/p&gt;

&lt;p&gt;The fact that you can define an even redefine elements like the + -, and square brackets means that Ruby has a great deal of flexibility. But there are limits of what you can redefining will be. You can‚Äôt where they find any of the literal object constructors: {} it‚Äôs always a hash literal (or a code block, if it appears in that context), ‚Äú‚Äù we‚Äôll always delimit a string, and so forth.&lt;/p&gt;

&lt;p&gt;One consideration, weighing in on the side of modifying objects instead of creating new ones, is efficiency, creating new objects is expensive in terms of memory and processing.&lt;/p&gt;

&lt;p&gt;All that matters is what the object can do, what methods it can execute.
Nil does exist.&lt;/p&gt;

&lt;p&gt;Single values, such as integer and strings, as opposed to collection or container objects that hold multiple values are considered as a scalar.&lt;/p&gt;

&lt;p&gt;Symbols aren‚Äôt unique. Whenever you see xyz, you are seeing a representation of the same object. Again, symbols are more like integers than strings in this respect. When you see the notation ‚Äúxyz‚Äù in two places, you are looking at representations of two different string objects; The literal string constructor ‚Äú‚Äù creates a new string. But :xyz is always the same Symbol object, just as 100 is always the same object.&lt;/p&gt;

&lt;p&gt;Symbols are immutable. There is no such thing as appending characters to a symbol; Once the symbol exists, that‚Äôs it. You will never see :abc ¬´¬†:d or anything of that kind.&lt;/p&gt;

&lt;p&gt;Symbols have a number of users, but most appearance fall into one of two categories, method arguments and hash keys.&lt;/p&gt;

&lt;p&gt;Well we can process symbol faster. Whereas the strings have a malleability that‚Äôs a good fit for their presentation of arbitrary values.
Strings being mutual, symbols not.&lt;/p&gt;

&lt;p&gt;Symbols share with integers not only immutability and uniqueness but also immediacy: a variable to which a symbol is bound provides the actual symbol value, not a reference tweet.&lt;/p&gt;

&lt;p&gt;Any class that aspires to be innumerable must have an each method whose job is to yield items to a supply code block , one at a time period
Numerators are closely related to eaters, but they are not the same thing period and iterate are is a method that yields one or more values to a code block. And enumerator is an object, not a method, therefore maintain state.&lt;/p&gt;

&lt;p&gt;An Enumerator can add innumerably to objects that don‚Äôt have it. It‚Äôs a matter of wiring: if you hook up and enumerators each method to any iterate are, then you can use the numerator to perform innumerable operations on the object that owns the iterator, whether that object considers itself innumerable or not.&lt;/p&gt;

&lt;p&gt;Here is the source code https://github.com/jleo3/twgr&lt;/p&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Practical Object-Oriented Design (POODR) by Sandi Metz</title>
    <link href="http://localhost:4000/2021/05/30/practical_oriented.html"/>
    <updated>2021-05-30T00:00:00-07:00</updated>
    <id>http://localhost:4000/2021/05/30/practical_oriented</id>
    <content type="html">&lt;p&gt;This book is the second edition that Sandi Metz publishes and it‚Äôs even considered as a must-read by the RoR community, give it a shot you won‚Äôt regret at all no matter what language you‚Äôre coming from.&lt;/p&gt;

&lt;p&gt;The introduction gives you why we want to work at a place where we feel as if we had some real impact, without being painful and why not make it funny as well, also explores the idea of increasing the productivity and reducing costs associated with poor design software.&lt;/p&gt;

&lt;p&gt;It goes over some agile methodology; it brings up the ‚ÄúAgile Manifesto‚Äù and explores its points of intersection between project management and software development.&lt;/p&gt;

&lt;p&gt;The core example of the book is a Bicycle store and it starts with the most simple but thorough class and it gradually increases its complexity always by giving you the reason why would you for instance need to add spare parts method to the main class or create a new one from scratch, what are the benefits and downsides? Is the customer really requesting this? What if we go beyond the scope of the app and make it flexible since the beginning? And finally, you end up with a Bicycle store and an app to book trips. üö≤ üèî&lt;/p&gt;

&lt;p&gt;It offers many examples of all the good practices or rules you may find below and gives you the before and after of each scenario, and you can find the most important examples in my repository.
https://github.com/DominicLizarraga/refactoring_ruby_edition&lt;/p&gt;

&lt;p&gt;Chapter 1. ‚ÄúObject-Oriented Design‚Äù&lt;/p&gt;

&lt;p&gt;Encourages you to shift your thinking from a world of collection of predefined procedures to modeling the world as a series of messages that pass between objects.&lt;/p&gt;

&lt;p&gt;It depicts that statement with an example of a woman waking up at the same hour, preparing her coffee and suddenly steps on the cat, causing a reaction that was not on the normal routine. üêà&lt;/p&gt;

&lt;p&gt;It also elaborates on the idea that the only sure thing that will happen is that your app will need some changes, it‚Äôs impossible to never change.
It includes some customer perspective and how the client doesn‚Äôt not even know what they want so you must be ready for progressive modifications.&lt;/p&gt;

&lt;p&gt;‚ÄúYou must combine an overall understanding of your application‚Äôs requirements with knowledge of the costs and benefits of design alternatives and then devise an arrangement of code that is cost effective in the present and will continue to be so I the future.‚Äù&lt;/p&gt;

&lt;p&gt;‚ÄúThe purpose of design is to allow you to design later, and its primary goal is to reduce the cost of change.‚Äù&lt;/p&gt;

&lt;p&gt;The chapter 2. ‚ÄúDesigning Classes with a single responsibility‚Äù&lt;/p&gt;

&lt;p&gt;The foundation of an object-oriented system is the message, but the most visible organizational structure is the class.&lt;/p&gt;

&lt;p&gt;Your goal is to model your application, using classes, such that it does what it is supposed to do right now and is also easy to change later.
Creating an easy-to-change application, however, is a different matter. Your application needs to work right now just once; it must be easy to change forever.&lt;/p&gt;

&lt;p&gt;The problem is not one of technical knowledge but of organization; you know how to write the code but not where to put it.&lt;/p&gt;

&lt;p&gt;When it says easy to change it means the following:&lt;/p&gt;

&lt;p&gt;‚Ä¢ changes have no unexpected side effects,&lt;/p&gt;

&lt;p&gt;‚Ä¢ small changes in requirements require correspondingly small changes in code,&lt;/p&gt;

&lt;p&gt;‚Ä¢ existing code is easy to reuse, and&lt;/p&gt;

&lt;p&gt;‚Ä¢ the easiest way to make a change is to add code that in itself is easy to change.&lt;/p&gt;

&lt;p&gt;A class should do the smallest possible useful thing; that is, it should have a single responsibility.&lt;/p&gt;

&lt;p&gt;Chapter 3. ‚ÄúManaging Dependencies‚Äù&lt;/p&gt;

&lt;p&gt;Because well-designed objects have a single responsibility, their very nature requires that they collaborate to accomplish complex tasks. This collaboration is powerful and perilous.&lt;/p&gt;

&lt;p&gt;To collaborate, an object must know something know about others. Knowing creates a dependency. Ig not managed carefully; these dependencies will strangle your application.&lt;/p&gt;

&lt;p&gt;Your design challenge is to manage dependencies so that each class has the fewest possible; a class should know just enough to do its job and not one thing more.&lt;/p&gt;

&lt;p&gt;To some degree of dependency between these two classes is inevitable; after all, they must collaborate.&lt;/p&gt;

&lt;p&gt;When two (or more) objects are so tightly coupled that they behave as a unit, it‚Äôs impossible to reuse just one.&lt;/p&gt;

&lt;p&gt;Every dependency is like a little dot of glue that causes your class to stick to the things it touches. A few dots are necessary.&lt;/p&gt;

&lt;p&gt;If prevented from achieving perfection, your goals should switch to improving the overall situation by leaving the code better than you found it.&lt;/p&gt;

&lt;p&gt;If you get this right, your application will be pleasant to work on and easy to maintain. If you get it wrong, the dependencies will gradually take over and the application will become harder to change.&lt;/p&gt;

&lt;p&gt;Depend on things that change less often than you do.&lt;/p&gt;

&lt;p&gt;Injecting dependencies creates loosely coupled objects that can be reused in novel ways.&lt;/p&gt;

&lt;p&gt;Isolating dependencies allows objects to quickly adapt to unexpected changes.&lt;/p&gt;

&lt;p&gt;The key to managing dependencies is to control their direction.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/object_oriented_design.jpeg&quot; alt=&quot;beginning_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Chapter 4. ‚ÄúCreating Flexible Interfaces‚Äù&lt;/p&gt;

&lt;p&gt;It‚Äôs easy to think about object-oriented applications as being the sum of their classes, they are so very visible; and they spin around responsibilities and dependencies. There is design detail that must be captured at that level, but an object-oriented application is more than just classes. It is made up of classes but defined by messages. Classes control what‚Äôs in your source code repository; messages reflect the living, animated application.&lt;/p&gt;

&lt;p&gt;Design therefore, must be concerned with the messages that pass between objects. It deals not only with what objects know (their responsibilities) but also with how they talk to one another. The conversation between objects takes place using their interfaces; this chapter explores creating flexible interfaces that allow applications to grow and to change.&lt;/p&gt;

&lt;p&gt;Imagine two running applications. Each consists of objects and the messages that pass between them.&lt;/p&gt;

&lt;p&gt;In the first application, the messages have no apparent pattern. Every object may send any message to any other object. If the message left visible trails, there trails would eventually draw a woven mat, with each object connected to every other.&lt;/p&gt;

&lt;p&gt;In the second application, the messages have a clearly defined pattern. Here the object communicates in specific and well-defined ways. If these messages left a trail, the trails would accumulate to create a set of islands with occasional bridges between them.&lt;/p&gt;

&lt;p&gt;The second application is composed of a pluggable, component-like objects. Each reveals as little about itself, and knows as little about others, as possible.&lt;/p&gt;

&lt;p&gt;The design goal, as always, is to retain maximum future flexibility while writing only enough code to meet today‚Äôs requirements.
Drawing this sequence diagram exposes the message passing between the objects.&lt;/p&gt;

&lt;p&gt;The best possible situation is for an object to be completely independent of its context. An object that could collaborate with others without knowing who they are or what they do could be reused in novel and unanticipated ways.&lt;/p&gt;

&lt;p&gt;Your goal is to write code that works today, that can easily be reused, and that can be adapted for unexpected use in the future.&lt;/p&gt;

&lt;p&gt;Object-oriented applications are defined by the messages that pass between objects. This message passing takes place along ‚Äúpublic‚Äù interfaces; well-defined public interfaces consists of stable method that expose the responsibilities of their underlying classes and provide maximal benefit at minimal cost.&lt;/p&gt;

&lt;p&gt;Chapter 5. ‚ÄúReducing Costs with Duck Typing‚Äù&lt;/p&gt;

&lt;p&gt;The purpose of object-oriented design is to reduce the cost of change.
Duck typed objects are chameleons that are defined more by their behavior than by their class.&lt;/p&gt;

&lt;p&gt;Avoid getting sidetracked by your knowledge of what each argument class already does; think instead about what the object needs.&lt;/p&gt;

&lt;p&gt;Concrete code is easy to understand but costly to extend. Abstract code may initially seem more obscure, but once understood is far easier to change.&lt;/p&gt;

&lt;p&gt;Recognizing hidden ducks.&lt;/p&gt;

&lt;p&gt;Case statements that switch on class&lt;/p&gt;

&lt;p&gt;Uses of method: kind_of? and is_a?&lt;/p&gt;

&lt;p&gt;responds_to?&lt;/p&gt;

&lt;p&gt;Polymorphism in OOP refers to the ability of many different objects to respond to the same message.&lt;/p&gt;

&lt;p&gt;Duck typing reveals virtual underlying abstractions that might otherwise be invisible. Depending on these abstractions reduces risks and increases flexibility, making your application cheaper to maintain and easier to change.&lt;/p&gt;

&lt;p&gt;Chapter 6. ‚ÄúAcquiring Behavior through Inheritance‚Äù&lt;/p&gt;

&lt;p&gt;This chapters offers a detailed example of how to write code that properly uses inheritance.&lt;/p&gt;

&lt;p&gt;The idea of inheritance may seem complicated, but as with all complexity, there‚Äôs a simplifying abstraction. Inheritance is, at its core, a mechanism for automatic message delegation, if and object cannot respond to a received message, it delegates that message to another.
A superclass can have many subclasses, but each subclass is permitted have one superclass.&lt;/p&gt;

&lt;p&gt;Creating hierarchy has costs; the best way to minimize these costs is to maximize your chance of getting the abstraction right before allowing subclasses to depend on it.&lt;/p&gt;

&lt;p&gt;The best way to create an abstract superclass Is by pushing code up from concrete subclasses.&lt;/p&gt;

&lt;p&gt;Chapter 7. ‚Äúsharing Role Behavior with Modules‚Äù&lt;/p&gt;

&lt;p&gt;To reap benefits from using inheritance you must understand not only how to write inheritable code but also when it makes sense to do so. Use of inheritance is always optional; every problem that it solves can be solved another way. Because no design technique is free, creating the most cost-effective application requires making informed tradeoffs between the relative costs and likely benefits alternatives.&lt;/p&gt;

&lt;p&gt;When formerly unrelated objects begin to play a common role, they enter into a relationship with the objects for whom they play the role.&lt;/p&gt;

&lt;p&gt;Many object-oriented languages provide a way to define a named group of methods that are independent of class and can be mixed in to any object. In ruby these mix-ins are called modules.&lt;/p&gt;

&lt;p&gt;When objects that play a common role need to share behavior, they do so via a Ruby module.&lt;/p&gt;

&lt;p&gt;When a class includes a module, the methods in that module get put into the same look path as methods acquired via inheritance.&lt;/p&gt;

&lt;p&gt;Chapter 8. ‚ÄúCombining Objects with Composition‚Äù&lt;/p&gt;

&lt;p&gt;Composition is the act of combining distinct parts into a complex whole such that the whole becomes more than the sum of its parts. Music for example, is composed.&lt;/p&gt;

&lt;p&gt;You can create software this same way, by using object-oriented composition to combine simple, independent objects into larger, more complex wholes.&lt;/p&gt;

&lt;p&gt;A bicycle has parts. Bicycle is the containing object, the parts are contained within a bicycle. The Bicycle class is responsible for responding to the spares message. This spares message should return a list of spare parts.&lt;/p&gt;

&lt;p&gt;The more parts an object has, the more likely it is that it should be modeled with composition.&lt;/p&gt;

&lt;p&gt;Composition, classical inheritance and behavior sharing via modules are competing techniques for arranging code. Each has different costs and benefits; these differences predispose them to be better at solving slightly different problems.&lt;/p&gt;

&lt;p&gt;Chapter 9. ‚ÄúDesigning Cost-Effective Tests‚Äù&lt;/p&gt;

&lt;p&gt;Without tests, these applications can be neither understood nor safely changed. They add value without increasing costs.&lt;/p&gt;

&lt;p&gt;These are notes I took from the book, nothing is mine.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Eloquent Ruby by Russ Olsen.</title>
    <link href="http://localhost:4000/2021/05/23/eloquent-ruby.html"/>
    <updated>2021-05-23T00:00:00-07:00</updated>
    <id>http://localhost:4000/2021/05/23/eloquent-ruby</id>
    <content type="html">&lt;p&gt;This is book is not for learning the very basics of Ruby, it‚Äôs more for people who have played with the language, the console and maybe built simple web app, I say this because it assumes you know what is an array, how you can manipulate or work with it therefore the book only shows shortcuts for instance methods on arrays, the correct usage of bang (!).&lt;/p&gt;

&lt;p&gt;I contains 3 sections after each chapter, staying out of trouble, in the wild and to wrap up, which has the most important takeaway after the lesson, i.e. ‚ÄúChoose the right control structure‚Äù, a real example from a codebase and finally a summary of what it went over.&lt;/p&gt;

&lt;p&gt;The book navigates each lesson through a kind of library system where a Document is created with its author, it plays with the first name and last name of the author, then it adds it to an array, then to a hash in order to have it more well organized.&lt;/p&gt;

&lt;p&gt;It will refresh you some basics methods like inject, map, sort, reverse, push, pop, delete, shift with the bang and without it always keeping in mind that Ruby is an idiomatic language.&lt;/p&gt;

&lt;p&gt;The book dedicates one chapter to learn how to work and mutilate this String class which is something Ruby is pretty smart and after that String brush up it goes to the Regular Expression, It shows you only the basics of how to validate an e-mail, address how to format a date, and it helps you find it easy to use instead of the intimidating appearance it seems to be.&lt;/p&gt;

&lt;p&gt;It has a deep chapter on the usage of symbols, it shows you the difference between a symbol and just string, it brings the symbol characteristics, it‚Äôs immutability, its better performance and it‚Äôs memory space utilization.&lt;/p&gt;

&lt;p&gt;The core of Ruby on Rails, everything is an object, shows you the keywords, how to treat the self, some instance methods in order to know what class is the object you are evaluating, it also presents why treating everything as an object is a good way because it provides consistency to your application, the difference between public, private, protected methods. how to require external libraries like date for instance and it closes remembering us that virtually everything in Ruby is an object, and virtually all of those objects inherit the basic set of methods from the Object class.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/Eloquent_ruby.jpeg&quot; alt=&quot;beginning_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Engineering is all about tradeoffs. just about every engineering decision involves getting something, but at a price, and there is a price to be paid for dynamic typing. In the chapter 8 lays out the difference between dynamic and static programming languages and encourages you to write tests which is the best way 2 make sure your code works as it should, do you need to test it early, you need to test it often, and you certainly need to test it whenever you change it.&lt;/p&gt;

&lt;p&gt;The tests framework used on this book are Unit::Test and RSpec it shows you how to start those tests and make them work with their document class. The author Hardly stresses how important is to write test in order to know how your code is working there is no shortcut, there is no easy way it would save you tons of hours if you do it often.&lt;/p&gt;

&lt;p&gt;The part II of the books goes over the back bone of the language, in this case Classes, Modules and Blocks. Despite shelves full of books on software architecture, and UML diagrams to fill an Art Museum and design meeting that seem to last longer than the pyramids, building software mostly comes down to writing one method after another, methods that stick to doing one thing and doing it well.&lt;/p&gt;

&lt;p&gt;Composing methods for humans, this technique advocates dividing your class up into methods that have three characteristics. first, each message should do a single thing , focus on solving a single aspect of the problem. by concentrating on one thing, your methods are not only easier to write, they are also easier to understand.&lt;/p&gt;

&lt;p&gt;second, each method needs to operate at a single conceptual level: Simply put, don‚Äôt mix high level logic with the nitty-gritty details. a method that implements their business logic around say, currency conversions, should not suddenly veer off into the details of how the various accounts are sorted in the database.&lt;/p&gt;

&lt;p&gt;Finally, each method needs to have a name that reflects its purpose. nothing new here, we have all heard endless lectures about picking good method names. the time to listen to all of them haranguing is when you are creating lots of little methods that you are trying to put together into a functional whole.&lt;/p&gt;

&lt;p&gt;Why is building small, well named methods that do one thing such a good idea? it‚Äôs not about writing better code for the computer, because the computer does not care. you can code the same algorithm in a handful of large methods or in a myriad of little message and , as long as you‚Äôve gotten the details right, the computer will give you exactly the same answer. the reason you should lean towards smaller methods is that all those compact, easy-to-comprehend methods will help you get the details right.&lt;/p&gt;

&lt;p&gt;Short, easily comprehending methods also have some secondary advantages as well. take the old bit of coding advice that every message should have exactly one way out, so that all of the logic converges at the bottom for a single return.&lt;/p&gt;

&lt;p&gt;the key to preventing your compose methods from turning on you is to remember that every method should have two things going for it. First, it should be short. and second, it should be coherent. In plain English, your method should be compact, but it should also do something.&lt;/p&gt;

&lt;p&gt;Unfortunately, since short is so much easier to remember than coherent, programmers will sometimes go too far in breaking up their methods.
There is also a chapter that teaches you how to modify normal operators (&amp;lt;, &amp;gt;, +, -, =, %, *) and change their behavior totally, it demonstrates the ups and downs of defining your own operators, and what are they consequences for others users if they don‚Äôt know what outcome will they get.&lt;/p&gt;

&lt;p&gt;Chapter 12 and 13 explore the idea behind equality classes, how you can leverage the custom operator by giving them another behavior, how equal? is different from ==, or even ===; all of them have different meaning and the author breaks them all down, next it touches the Singleton and class methods what are their uses, when should you use them, how are they built and again they differences.&lt;/p&gt;

&lt;p&gt;The usage of Class instance variables, instance variables and modules, what are the benefits , the caveats, what happen if a name collision takes place, what can they hold, what are the risks of over using a module and one of the keys of programming which is naming these instances, those classes, these modules. How to include that module into a Class, how to extend the usage of that module, and also how is the look-up procedure when you call a method (Inheritance tree).&lt;/p&gt;

&lt;p&gt;An easy rule of thumb for naming modules is that if you find yourself creating a lot of names that all start with the same word, perhaps ‚ÄòTonsOTonerPrintQueue‚Äô and ‚ÄòTonsOTonerPrintAdministration‚Äô, then you just may need a ‚ÄòTonsOToner‚Äô module.&lt;/p&gt;

&lt;p&gt;The book also covers iterators with 3 chapters, they‚Äôre different ways of calling, the usage of yield (Execute around), the naming convention, how to enable a class to use more than 40 methods coming from the enumerable module, the usage of rescue, begin, raise; Come on errors when using execute around which can be for instance forget about exceptions; because execute around is all about warranties. The whole idea of execute around is that the color is warranty that this will happen before the code fires and that will happen after.&lt;/p&gt;

&lt;p&gt;The technique ‚Äúexecute later ‚Äú is when you add a parameter prefix with an ampersand, some practical examples of lambdas and procs as well and lastly it touches some of the metaprogramming topics to modify subclasses, to use the method_missing method In order to rescue one execution and provide an exception.&lt;/p&gt;

&lt;p&gt;Updating existing classes, fixing broken classes, what is the monkey patching? Dealing with DSL and XML, what are the Gems package, how to consume them, nuts and bolts of gems, where are they located and also how to build a gem publish them and make it public.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Beginning Rails 6 üöá by Brady Somerville, Adam Gamble.</title>
    <link href="http://localhost:4000/2021/04/01/beginning.html"/>
    <updated>2021-04-01T00:00:00-07:00</updated>
    <id>http://localhost:4000/2021/04/01/beginning</id>
    <content type="html">&lt;p&gt;This book takes you from the straightforward ‚Äúrails new blog ‚Äìd=postgrsql‚Äù to adding active jobs and sending automated emails; it goes step by step so that you can see gradually the app development, it has more than 500 pages with 18 chapters; it touches the very basics of Ruby in the 4th just in case the reader has no experience with this language however Rails is very intuitive and easy to follow along.&lt;/p&gt;

&lt;p&gt;As you may read the main web app that is built along with this book is a blog where an user can sign-in/ log-in with email and password, can post with ‚ÄúRich Text‚Äù (attach images, modify font, color, size), can edit its own posts, can comment on other‚Äôs posts and finally can delete only posts that user has created. Articles are the epicenter of the application.&lt;/p&gt;

&lt;p&gt;It uses the most common Gems in order to get the app up and running, it helps you add the gem to translate the app into different languages (Spanish, Portuguese, etc.), it helps you enable the active storage gem which is used like a cloud storage (comes by default with Rails), explains you the differences between CSS and SCSS, also how to connect JavaScript, what is it for?, action text, Ajax, Action Cable and finally it uploads the app to Heroku (Cloud platform to host your app) in order to grant access anyone in the world.&lt;/p&gt;

&lt;p&gt;It was also the first book I‚Äôve read that contains the whole Action Pack broken down, routes, controllers, views, which means Action Controller, Action View and Action Dispatch respectively in addition the whole request cycle, who are the actors, what is DNS for? And lands all of this with a CD player in a car example, pretty clear for me.&lt;/p&gt;

&lt;p&gt;Notes. ‚úçüèª&lt;/p&gt;

&lt;p&gt;A framework is a collection of libraries and tools intended to facilitate development. Design with productivity in mind a good framework provides a basic but complete infrastructure on top of which to build an application.
Why choose Rails? üõ§&lt;/p&gt;

&lt;p&gt;It provides a powerful database abstraction layer called active records, which works with all popular data based systems. It chips with a sensible set of defaults and provides a well-proven, multi-layer system for organizing programs files and concerns.&lt;/p&gt;

&lt;p&gt;Its goal as a framework is to solve 80% of the problems that occur in web development, assuming that the remaining 20% are problems that are unique to the applications domain; you get to focus on just 20% which is what really matters.&lt;/p&gt;

&lt;p&gt;With rails, you can respond to the needs of customers quickly and easily, and rails works well during collaborative development. It has the famous convention over configuration, ‚Äúdon‚Äôt repeat yourself‚Äù (DRY), the concepts of rapid prototyping and that ‚Äúyou ain‚Äôt gonna need it‚Äù (YAGNI) Philosophy, closing the gap between customer and programmer.&lt;/p&gt;

&lt;p&gt;Programming is all about making decisions. If you were to write a system from scratch, without the aid of rails, you would have to make a lot of decisions: how to organize your files, what naming conventions to adopt, and how to handle databases access are only a few. Rails lets you start right away by encompassing a set of intelligent decisions about how you program should work and alleviating the
amount of low-level decisions making you need to do up front. As a result, you can focus on the problems direct trying to solve and get the job done more quickly.&lt;/p&gt;

&lt;p&gt;Although you can manipulate most things in the Rails setup and environment, the more you accept the defaults, the faster you can develop applications and predict how they will work. If you put your files in the right place and name them according to the right conventions, things just work. If you are willing to agree to the defaults, you‚Äôre generally have less code to write.&lt;/p&gt;

&lt;p&gt;The more duplication exists in a system, the more room box has to hide.
Ruby is known for making certain programmatic constructs look more natural by way of what‚Äôs called syntactic sugar. Rails has popularized the term synthetic vinegar coma is the exact opposite of syntactic sugar: awkward programmatic constructs are discouraged by making their syntax look sour.&lt;/p&gt;

&lt;p&gt;Rails employs a time honored and well-established architectural pattern that advocates dividing application logic and labor into three distinct categories: the model, view, and controller. In the MVC pattern, the model represents the data, the view represents the user interface, and the controller directs all the action. The real power lies in the combination of the MVC layers.&lt;/p&gt;

&lt;p&gt;Using the pain of maintenance considerably while increasing the level of ability among components.&lt;/p&gt;

&lt;p&gt;Models. in rails, the model layer represents the database. For example, a model called User convention, would map to a table called users. All the rules for data access, associations, validation, calculations and routines that should be executed before and after save, update or destroy operation and nearly encapsulated in get model.&lt;/p&gt;

&lt;p&gt;Controllers. It is the controller‚Äôs job to fill with requests coma like processing server variables and formatting data, asking the model for information, and sending information back to the model to be saved in the database. It sets up variables to be used in the view, and then proceeds to render or redirect to another action after processing is complete.&lt;/p&gt;

&lt;p&gt;Controllers typically manage a single area of an application. For example, in a recipe application, you probably have a controller just for managing recipes. Inside the recipes controller, you can define what are called actions. Actions describe what a controller can do. If you want to be able to create, read coma update and delete recipes, you create appropriately named actions in the recipe‚Äôs controller.&lt;/p&gt;

&lt;p&gt;When a request comes into a controller, it uses a URL parameter to identify the action to execute; And when it is done, it‚Äôs sensory response to the browser. Their response is what you look at next.
Views. The view layer in the MVC forms the visible part of the application. In rails, views are the templates that (most of the time) contain HTML markup to be rendered in a browser. It‚Äôs important to note that views are meant to be free of all but the simplest programming logic. Any direct interaction with the model layer it should be delegated to the controller layer, to keep the view clean and decouple from the applications business logic.&lt;/p&gt;

&lt;p&gt;active_record: a library that handles database abstraction and interaction.&lt;/p&gt;

&lt;p&gt;Action view: a templating system that generates the HTML documents the visitor gets back as a result of a request to a rails application.
Action controller: a library for manipulating both application flow and the data coming from the database on its way to being displayed in a view. New lane these libraries can be used independently of rails one of another. Together, they form the rails MVC development stack.
Rails is modular. One of the greatest features of rails is that it was built with modularity in mind from the ground up. Although many developers appreciate the fact that they get a full stack, you may have your own preferences in libraries.&lt;/p&gt;

&lt;p&gt;In the real world, specifications above as we learn how real users interact with our web applications.&lt;/p&gt;

&lt;p&gt;Chapter 3, goes to explain how is the rails architecture distributed, what are the files inside of each folder, how to start writing our first migration, execute it, how to add validations to the model, add more fields to the model, and also, how to rollback a migration in case you make a mistake or you did not add something important, it is always reversible.&lt;/p&gt;

&lt;p&gt;Chapter 4, explains why Ruby is dynamic, how you can use the IRB prompt, what are the Ruby data types such as string, numbers, symbols, arrays and hashes. what are variables, what are they for, and they need do not specify a data type for the variable or the find it in your code before you use it. What are the best practices for naming variables, in this case long and descriptive. Blocks and iterators, comments, control structures, methods. And finally, a brief introduction to object-oriented programming, objects and classes.&lt;/p&gt;

&lt;p&gt;A key feature of active record which maps table to classes, table rows to object, and table columns to object attributes. This practice is commonly known as object relational mapping (ORM).&lt;/p&gt;

&lt;p&gt;rails db:system:change -Which makes it easy to switch databases.
Active Record provides the link between these classes and your tables, allowing you to work with what look like regular objects, which, in turn, can be persisted to the database. This frees you from having to write low level SQL to talk to the database.&lt;/p&gt;

&lt;p&gt;Object oriented programming is all about objects. You create a class that encapsulates all the logic required to create an object, along with its properties and attributes, and use the class to produce new objects, each of which is in unique instance, distinct from other objects of the same class. That means sound a little abstract (and with good reason abstraction, after all, is the name of the game) but if it helps you can think of a class as being an object factory.&lt;/p&gt;

&lt;p&gt;Classes are used to create objects, and objects have attributes. Every object has a unique set of attributes different from other objects of the same class.&lt;/p&gt;

&lt;p&gt;A return of nil always represents nothing.&lt;/p&gt;

&lt;p&gt;The new constructor creates a new object, but it is your responsibility to save it. If you forget to save the object, it will never be written to the database.&lt;/p&gt;

&lt;p&gt;To summarize, when you want to create a new object and save it manually, use the new constructor; When you want to create and save in one operation, use create.&lt;/p&gt;

&lt;p&gt;update_attributes is an instance variable if you want to update attributes in just one operation.&lt;/p&gt;

&lt;p&gt;The following call works for deleting or what‚Äôs inside the array Article.delete([1, 2, 3])&lt;/p&gt;

&lt;p&gt;The primary way in which you enhance models is by adding methods to them. This is referred to as adding domain logic. With active record, all the logic for a particular table is contained in one place that model. This is why the model is set to encapsulate all the domain logic. This logic includes access rules, validations, relationships, and well, just about anything else you feel like adding.&lt;/p&gt;

&lt;p&gt;user.build_profile(attributes={})  Returns a new profile object that has been instantiated with attributes and linked to user through a foreign key but has not yet been saved.&lt;/p&gt;

&lt;p&gt;user.create_profile(attributes={})  Returns a new profile object that has been instantiated with attributes and linked to user through a foreign key that has already been saved.&lt;/p&gt;

&lt;p&gt;Their rule of thumb is that belongs_to declaration always go in the class with the foreign key&lt;/p&gt;

&lt;p&gt;rails db:setup Command recreates the database and adds the seat data as you may expect.&lt;/p&gt;

&lt;p&gt;Whenever you want to add a validation error to the list of errors, you just type errors.add(column_name, error_message).&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/beginning_rails_6.jpeg&quot; alt=&quot;beginning_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Action Controller. Orchestrate your applications flow. Every time a user requests a page, submits a form, or clicks a link, that request is handled in one way or another by a controller.&lt;/p&gt;

&lt;p&gt;A typical controller is most often a collection of actions that relates to a specific area of concern. For example, consider the blog application you have been building in the previous chapters. The controller that manages articles has the class name articles controller and has action methods for listing, creating, updating, reading, and deleting articles.&lt;/p&gt;

&lt;p&gt;The controller looks for a view whose name matches they requested name action.&lt;/p&gt;

&lt;p&gt;Action View. this library is another important part of action pack. Given that controllers are responsible for handling the request and issuing a response, views are responsible for rendering the output of a response in a way a browser or any other user agent can understand. The primary mechanism by which they do is through shared variables. All instance variables that you may see in a view comes from the controller; look at the view is not handling any logic to fetch the list of these articles.
Action Pack. routing salt this problem by decoupling the URL from the underlying program implementation.&lt;/p&gt;

&lt;p&gt;Request cycle&lt;/p&gt;

&lt;p&gt;Then type request to response process is called the action pack request cycle. They request cycle consists of the following steps:
Rails receives a request from the outside world (usually a browser).
routing picks apart the request to determine the controller and action to invoke.&lt;/p&gt;

&lt;p&gt;A new controller object is instantiated, and an action method is called.
The controller interacts with the model (usually performing a CRUD operation in a database with an Active Record model, but not necessarily).
A response is sent back to the browser, in the form of either a render or a red direct.&lt;/p&gt;

&lt;p&gt;HTTP verbs&lt;/p&gt;

&lt;p&gt;The HTTP protocol defines several request methods, the most popular of which art GET and POST. Both our method for requesting a webpage; The differences in how the request is sent. GET is the simpler of the two period it includes all the information about the request as a part of the URL. POST sends information in visibly, which is to say as a part of the request header and not part of the URL so you cannot type a post request into your browser‚Äôs locations bar.&lt;/p&gt;

&lt;p&gt;How do you know when to use each? The best way to think of this is to consider GET high as read method. It should never do anything destructive, such as modifying a database record. POST, on the other hand, can be thought of as a writer method. When you need to create data, use POST. PATCH is used when you need to update a record partially, for instance, only changing your e-mail address. PUT is used to update a record completely.&lt;/p&gt;

&lt;p&gt;Most of the time, our controllers handle interactions with a collection of things, so we reflected by using a plural name.&lt;/p&gt;

&lt;p&gt;Comments are interesting because they are a little different from our other models so far. Comments depend on a particular article; They never exist on their own because they are conceptually meaningless if they are not tight to an article.&lt;/p&gt;

&lt;p&gt;Remember that you always have the article_id in your parameters because it is always included in your nested name routes.
Also notice how you find they assign comment you do so using @article.comments.&lt;/p&gt;

&lt;p&gt;HTTP is a stateless so how can the application remember you are logged in if HTTP is a stateless? The answer is that you fake state with session object. Example: session[:account_id] = @account.id.&lt;/p&gt;

&lt;p&gt;Notice that you define session as a resource and not resources, because you never deal a set of sessions at once.&lt;/p&gt;

&lt;p&gt;The rule of thumb is that whenever you have data that are provided by the user, you cannot trust them blindly . You need to escape it. This includes model attributes as well ask parameters. Fortunately, railes escapes all rendered as strings for you.&lt;/p&gt;

&lt;p&gt;html_safe method skips the HTML escaping process.&lt;/p&gt;

&lt;p&gt;simple_fromat method Convert text to HTML using simple formatting rules.
The chapters of Active Storage, how to implement Ajax (was implemented for creating and deleting comments, interacted with the DOM with a .js file where all the code for doing this was placed) and sending and receiving email (Action Mailer and Action Mailbox) is difficult to describe but overall those chapters are pretty neat, I‚Äôd say more than https://guides.rubyonrails.org/.&lt;/p&gt;

&lt;p&gt;Active Job chapter covers the configuration, the creation, the exception handling, retry, discard and finally it has a benchmark exercise where the perform_later method on the mail delivery improved significantly the app performance.&lt;/p&gt;

&lt;p&gt;This is the first time I faced Active Model, before this one I didn‚Äôt know it existed, the book take that module to build an EmailAFriend without the need to create the whole model as Article for example and with all the benefits a model implies, Active Record, callbacks, validations, attributes and so on.&lt;/p&gt;

&lt;p&gt;The Action Cable chapter is short, explains how HTTP is the normal way the web works, then how web sockets were introduced as a bidirectional server communication and after that it just lays out the four main concepts as connections, channels, streams, broadcasting, subscription and so on, it configures it and apply the broadcast to Article so every time one article is published it will appear at the top without refreshing and start the cycle from the beginning.&lt;/p&gt;

&lt;p&gt;The last 3 chapters covers testing, internationalization and the upload to Heroku, the first on them emphasize the importance of always test after each small change, and why the didn‚Äôt apply test to follow along, they bring up the technical debt, refactoring. what tools are outside to automate the testing like Unit::Test, fixtures, validations and lastly the 4 types of tests, for models, for controllers, mailers and system, it doesn‚Äôt go deep into the weeds, it only explain what they are.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>The Ruby Way by Hal Fulton with Andr√© Arko</title>
    <link href="http://localhost:4000/2021/02/21/ruby_way.html"/>
    <updated>2021-02-21T00:00:00-08:00</updated>
    <id>http://localhost:4000/2021/02/21/ruby_way</id>
    <content type="html">&lt;p&gt;The book is on its third edition, it has had plenty of space as the must-read for every Ruby programmer, many great personalities in the software development community have commented, praised, written about this book (including Yukihiro ‚ÄúMatz‚Äù Matsumoto, the creator of Ruby) because a few years after Ruby was conceived the first edition was published, and as everything evolved, the book has done as well.&lt;/p&gt;

&lt;p&gt;This time the background of the beginning of this language is presented, how Matz thought in terms of design and usage for building this language, it went from the approach machine-centered paradigm to a human-centered one. Ruby strives to be friendly to the programmer, and with that in mind, we can rely on a completely new style of software development, more strategically then tactic, easier to read, needlessly to add comments.&lt;/p&gt;

&lt;p&gt;This piece has 22 chapters, and more than 700 pages; it covers the conception of the language, introduction to object orientation, basic syntax and semantics, working with strings, symbols, ranges, numbers, times and dates and of course our arrays, hashes and other Enumerables, also, goes over more advanced data structures like trees, graphs, sets, stacks and queues. It brings the difference between static and dynamic languages, testing, how to handle different data formats, how is related Ruby and web applications, and more stuff that you can leverage in order to cement draw Ruby fundamentals.&lt;/p&gt;

&lt;p&gt;To me it was the longest book I‚Äôd ever had in my hands, quite hard to start to be honest but as soon as you pass the first pages you get caught, it refreshed me a ton of built in methods for the most important data structures, and when I say a ton, it‚Äôs about 80% of all what you need (very comfy way to read these methods on the book, and with the method description more friendlier) , so very well thought from the author perspective, not hard theory to digest, only practical examples and a few debates between 2 different points of view but nothing abstract.&lt;/p&gt;

&lt;p&gt;I think is a good start for people who want to harden their programming skills because it covers many topics of software development, it doesn‚Äôt matter what language you come from, it works for processing text files, web development, graphical interfaces, some algorithms to get familiarized with.&lt;/p&gt;

&lt;p&gt;Notes. ‚úçüèª&lt;/p&gt;

&lt;p&gt;An object is an entity that serves as a container for data and also controls access to the data. Associated with the object is a set of attributes, which are essentially no more than variables belonging to the object.Also associated with an object is a set of functions that provide an interface to the functionality of the object, called methods.&lt;/p&gt;

&lt;p&gt;It is a essential that any OOP language to provide encapsulation.
The class may be thought of as the blueprint or pattern; The object itself is the thing created from that blueprint or pattern. A class is often thought of as an abstract type, a more complex type than, for example, an integer or character string.&lt;/p&gt;

&lt;p&gt;Inheritance is a mechanism that allows us to extend previously existing entity by adding features to create a new entity. In short, inheritance is a way of reusing code. Easy effective code reuse has long been the Holy Grail of computer science, resulting in the invention decades ago of parameterized subroutines and code libraries.&lt;/p&gt;

&lt;p&gt;Multiple inheritance he‚Äôs probably the most controversial area in OOP; one camp will point out the potential for ambiguity that must be resolved. It is conceivable that a new class could inherit from more than one class.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/ruby-way.jpeg&quot; alt=&quot;agile_dev_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Diamond inheritance problem, so-called because of the shape of its inheritance diagram, with both super classes inheriting from a single common superclass.&lt;/p&gt;

&lt;p&gt;The literal meaning of polymorphism is the ability to take on multiple forms or shapes. In its broadest sense, this refers to the ability to different objects to respond in different ways to the same message (or method invocation).&lt;/p&gt;

&lt;p&gt;The first, inheritance polymorphism, is what most programmers are referring to when they talk about polymorphism.&lt;/p&gt;

&lt;p&gt;When a class inherits from its superclass we know that any method present in the superclass is also present in the subclass.&lt;/p&gt;

&lt;p&gt;The second kind of polymorphism Conway identifies is interface polymorphism.&lt;/p&gt;

&lt;p&gt;This does not require any inheritance relationship between classes; It only requires that the interface of the object have met thoughts of a certain name.&lt;/p&gt;

&lt;p&gt;A module consists of methods or constants that may be used as though they were actually part of the class or object; When a module is mixed in via the include statement this is considered to be a restrictive form of multiple inheritance.&lt;/p&gt;

&lt;p&gt;By rivals are used to hold reference to objects.&lt;/p&gt;

&lt;p&gt;A module is a collection of methods and constants that is external to the Ruby program.&lt;/p&gt;

&lt;p&gt;The private level means that the method is accessible only within the class or its subclass.&lt;/p&gt;

&lt;p&gt;Ruby is a dynamic language in the sense that objects and classes may be altered at runtime. Will be has the capability to construct and evaluate pieces of gold in the course of executing the existing statically coded program. This is perhaps the most difficult area a programmer will encounter in learning Ruby.&lt;/p&gt;

&lt;p&gt;Everything is intuitive once you understand it.&lt;/p&gt;

&lt;p&gt;Everything is true except false and nil.&lt;/p&gt;

&lt;p&gt;many languages have some kind of for loop, as does Ruby. The question sooner or later arises as to whether the index variable can be modified.&lt;/p&gt;

&lt;p&gt;Any object can be in principle converted to some kind of string representation; That is why nearly every quarter class has a to_s method.&lt;/p&gt;

&lt;p&gt;A symbol is like a string in that it corresponds to a sequence of chapters. It is unlikely string in that each symbol has only one instance (just as a fixed number works). Therefore there is a memory or performance issue to be aware of.&lt;/p&gt;

&lt;p&gt;The &amp;amp; notation allows us to pass a proc instead of an explicit attached block if we want. Because we use the &amp;amp; on an object that is not a problem interpreter tries to call to_call on that object. It will call it repeatedly, once for each element in the right.
The collect method (part of innumerable) is a useful tool that proves to be a time and labor saver in many circumstances.&lt;/p&gt;

&lt;p&gt;If you want to delete all instances of a certain piece of data, delete would do the job.
The compact method (or it‚Äôs in place version compact!) removes nil values from an array, leaving the rest untouched.&lt;/p&gt;

&lt;p&gt;The delete_if passes every element into the supply block and delete the elements for which the block evaluates to true. It behaves similarly to reject!, except that the latter can return when the array remains unchanged.&lt;/p&gt;

&lt;p&gt;They reject method takes a block and produces a new array without the elements for which the block returns true.&lt;/p&gt;

&lt;p&gt;Bear in mind that +, concat, and even +=always create a new array object. Also bear in mind that while ¬´¬†adds to the existing array, it happens a new array element (which may itself be an array).&lt;/p&gt;

&lt;p&gt;What makes a collection enumerable ? Largely it is just the fact of being a collection. The module enumerable has the requirements that the default iterate each should be defined. Sequence as such is not an issue because even on unordered collection can have any generator.&lt;/p&gt;

&lt;p&gt;And enumerator is basically an object that can be used for external or internal iteration. In internal iteration, we simply iterate over each item in the collection and execute the block for each item in the sequence; External iteration means that the code can grab the next item in the sequence ‚Äúon demand‚Äù.&lt;/p&gt;

&lt;p&gt;There are many other methods on Enumerable, and I cover most of them here. For convenience, I have divided them a little arbitrarily in four areas: searching and selecting, counting and comparing, iterating, and finally extracting and converting .
The purpose of inheritance, of course, is to add or enhance functionality.&lt;/p&gt;

&lt;p&gt;It‚Äôs not always necessary to use super in such a way, but it is often convenient. Every attribute and method of the point is reflected in the child.&lt;/p&gt;

&lt;p&gt;The child can have additional attributes and methods, as you have already seen.
The child can override or redefine any of the attributes and methods of the parents.&lt;/p&gt;

&lt;p&gt;If we invoke a method on a subclass, the method for that class will be called if it exists. If it does not the method in the superclass will be called, and so on.&lt;/p&gt;

&lt;p&gt;When we create a new structure template by calling Struct . New we may pass a string with the class name as the first argument. If we do come a new class is created where in class Struct itself, with the name passed in as the first parameter and the attributes given as the rest of the parameters.&lt;/p&gt;

&lt;p&gt;Every time you invoke a method, you are sending a message to an object.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Agile web Development with Rails 6 üõ§ by Sam Ruby, David B Copeland, Dave Thomas.</title>
    <link href="http://localhost:4000/2021/01/22/agile.html"/>
    <updated>2021-01-22T00:00:00-08:00</updated>
    <id>http://localhost:4000/2021/01/22/agile</id>
    <content type="html">&lt;p&gt;This was the first Rails book I read and caught me with the real example it takes you through, you‚Äôll be building an online shop and the author goes from installing Rails, ruby and other libraries to finally code some automations and uploading to Heroku, you can either follow the book or at the beginning of each chapter you can download the final version of the app so that you will never lose track of what is being presented, also, brings a summary after lesson and has a playtime section where you can push yourself to do a bit more of the exercises.&lt;/p&gt;

&lt;p&gt;In addition something I find very interesting in the book is that the foreword and some sections in each chapter DHH had the opportunity to share either his experience or advice regarding the current topic and he, being the creator of this framework and having built a company on top of it (Basecamp and Hey), I consider it as a nugget of information. Lastly, this is the book that has the best explanation about how Action Pack, Action Controller, Action View, Action Dispatch work together; it dedicates 1 chapter to just explain how routes get match to the controller and their actions and how are they converted into views. Very immaculate.&lt;/p&gt;

&lt;p&gt;Let‚Äôs begin with chapter 2 (1st is about installing all the stuff) The first example is to show the reader how to use the rails command, in this case the author creates a demo app with two views and one controller, after that it creates a couple of links in order to show how works, nothing fancy so far.&lt;/p&gt;

&lt;p&gt;Next chapter goes over the MVC architecture, the model is responsible for maintaining the state of the application. Is more than data; It enforces all the business rules that apply to the that data. For example, if a discount should not be applied to orders of less than $20, the model enforces the constraint. The model acts as both a gatekeeper and a data stored.&lt;/p&gt;

&lt;p&gt;That view is responsible for generating a user interface, normally based on data in the model. For example, an online store has a list of products to be displayed on a catalog screen. The list is accessible via the model, but it is a view that formats the list for the end user. Debut itself never handles incoming data. Controllers on the other side, orchestrate the application. They receive events from the outside world (normally, user input), interact with the model, and display an appropriate view to the user.&lt;/p&gt;

&lt;p&gt;The MVC architecture was originally intended for conventional GUI applications, where developers found that the separation of concerns led to far less coupling which in turn made the code easier to write and maintain. Each concept or action was expressed in a single, well known place.&lt;/p&gt;

&lt;p&gt;In a Rails application, an incoming request is first sent to a router, which works out where in the application the request should be sent and how the request should be parsed. Ultimately, these face identifies a particular method (called an action in rails parlance) somewhere in the controller code. The action might look at data in the request it might interact with the model, and it might cause other actions to be invoked. Eventually the action prepares information for the view, renders something to the user.&lt;/p&gt;

&lt;p&gt;The routing component receives the incoming request and immediately picks it apart. The request contains a path (/line_items?product_id=2) and a method (this button does a POST operation; Other commands methods are GET, PUT, PATCH and DELETE). In this case, Rails takes the first part of the path line_items as the name of the controller and the product_id as the id of the product . By convention, POST methods are associated with create actions. They create method handles user requests. In this case, it finds the current user shopping cart when parentheses which is an object managed by the model). It also asks the model to find the information for product 2. It then tells the shopping cart to add the product to itself.&lt;/p&gt;

&lt;p&gt;Object relational mapping (ORM) libraries map database tables to classes. If a database has a table called orders, our program will have a class name Order. Rows in this table correspond to objects of the class - a particular order is represented as an object of the Order class. Within that object, attributes are used to get and set the individual columns . Our order object has methods to get and set the amount, sales tax, and so on.&lt;/p&gt;

&lt;p&gt;So, and ORM layer maps tables to classes, rows to objects, and columns to attributes of those objects. Class methods are used to perform table level operations, and instance method perform operations on individual rows. Active record is the ORM layer supplied with rails. It closely follows the standard model: tables map 2 classes, roast two objects, and columns to object attributes.&lt;/p&gt;

&lt;p&gt;Action pack: the view and controller&lt;/p&gt;

&lt;p&gt;When you think about it, and controller parts of the MVC are pretty intimate. The controller supplies their data to the view and the controller receives events from the pages generated by the abuse. Because of these interactions, support for views and controllers in rails is bundled into a single component, Action pack.
The view is responsible for creating all or part of the response to the displayed in a browser, to be processed by an application, or to be sent as an e-mail. At its simplest , is a chunk of HTML code that displays some fixed text. More typically, you will want to include dynamic content created by the action method in the controller.&lt;/p&gt;

&lt;p&gt;The controller in rails is the logical center of your applications. It coordinates the interaction among the user, the abuse, and the model . however, rails handles most of this interaction behind the scenes; The code you write concentrates on application level functionality . This makes rails controller code remarkably easy to develop and maintain.&lt;/p&gt;

&lt;p&gt;The controller is also home to a number of important ancillary services:&lt;/p&gt;

&lt;p&gt;‚Ä¢ It is responsible for routing external requests to internal actions. It handles people friendly you are extremely well.&lt;/p&gt;

&lt;p&gt;‚Ä¢ It manages catching, which can give application orders of magnitude performance boosts.&lt;/p&gt;

&lt;p&gt;‚Ä¢ It manages helper modules, which extend the capabilities of the view templates without walking up their code.&lt;/p&gt;

&lt;p&gt;‚Ä¢ It manages sessions, giving the users the impression of ongoing traction with our applications.&lt;/p&gt;

&lt;div&gt;&lt;img src=&quot;/../graphics/projects/agile_web_dev.jpeg&quot; alt=&quot;agile_dev_rails&quot; style=&quot;width:300px;&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Chapter 4 goes on to what is an object oriented language, will we names for local variables, methods parameters, and methods names, it provides the general rules of syntax, the kind of data types you will find in groovy like strings, array, hashes. The core of the Ruby language, which is blocks and iterators, control structures with the if statements, while loops, unless, until.&lt;/p&gt;

&lt;p&gt;Chapter 5: incremental development, use cases, page flow, data and priorities are covered. The first sketch of the shopping cart is shown, the user stories are broken down for instance: the buyer uses the web app to browse products we have to sell , select some of to purchase, and supply the information needed to create an order. On the other side the seller journey is as well described and something important is how the data is it going to be handled, how many controllers are we planning to code, the schemas are presented as well and finally the author emphasizes that all of these planning will become outdated because we must get customer feedback and most of these will change. The book pushes you to develop the web app in incremental changes called iterations.&lt;/p&gt;

&lt;p&gt;Chapter 6, it starts with the application ‚Äúrails new depot‚Äù and creating the first model in this case the product , it shows you how to migrate, the addition of CSS for the forms, it explains the HTTP verbs and this is the first commit to GitHub. Next chapter added some model validations in order to ensure the user input, also, introduced the first unit test examples and explain how they work; the importance of naming self-explanatory variables, tests.&lt;/p&gt;

&lt;p&gt;Chapter 8, builds the 2nd controller in this case is a Store and it added some CSS to the index view, also, went over the layout, using partials files in order to create the navbar, and continued with the testing now including the front end (what should the &amp;lt;H2&amp;gt; tag title contain or how many items &amp;lt;li&amp;gt; should have). The following chapter creates the Cart model, line_item, by a scaffolding them, and connect the line_item model to product and to cart, becoming a joint table; another feature added here is the introduction to sessions , it explains how they work, how much they can carry on and what are they useful.&lt;/p&gt;

&lt;p&gt;Chapter 10 covers how to deploy a new migration because in the first one, something was forgotten and leveraging how you can juggle with migrations there are four decided to add a new one instead of creating everything from scratch. Some flash notice modifications took place, and a strong parameter adjustment as well, finally the CSS was at refined to the new changes. The next chapter introduced they AJAX and it explains it very well, the book contains why Ajax exist how can I change the flow of the views, then Ajax feature it‚Äôs just highlighting some data without refreshing the whole page and finally action cable is presented with the core concepts.&lt;/p&gt;

&lt;p&gt;Within the next iteration the add_order_to_line_item model is created, a new form for capturing the lines items for the order as well and linking Line items 2 one order, after each addition a test is deployed and passed. In order to make more dynamic our rails app we need to add React which is a JavaScript view library designed to quickly create dynamic user interfaces. We will use it to create a dynamic payment method details form coma and Webpacker will ensure that the configuration and set-up for all these is as simple as possible. That said, there is a bit of setup we need to do. Web Packer essentially is the decisions made by the rail steam and bundled up into a gem.&lt;/p&gt;

&lt;p&gt;React dynamically renders HTML. Unlike ERB, react does this in the browser, and it is optimized to do it fast. React re render each field of the form instead of having this server re render the entire thing. the core concept in react is components. A component is a view, backed by some sort of state. When the state changes, the rear Enders. The view can behave differently depending on the current state inside the component.&lt;/p&gt;

&lt;p&gt;Chapter 14 goes on the e-mail module of Rails and explain why sending e-mail normally is slow, why would you choose Action Mailer and then you put on top of it Active Job to offload the work.
In a Rails app, when a bit of logic becomes more complex than a line or two of code, you want to move that out of the controller and put it into a model.&lt;/p&gt;

&lt;p&gt;The chapter 15, 16, 17, are about logging in, internationalization, and responding emails with rich text this is almost as straight out as you may find it in the rails guide so I won‚Äôt go deeper due to is configuration, set-up and little adjustments.&lt;/p&gt;

&lt;p&gt;The last part of the book (III) contains 6 chapters and they are under a title called ‚ÄúRails in depth‚Äù I consider this very helpful if you want to go deep into the weeds and explore how is rails composed? why does rails app contain many default files? What are they for? When is correct to use a helper from there app file or from the model? Where does rail put the logs? Naming conventions? Where do you configure the environments? And many interesting methods that I didn‚Äôt know.&lt;/p&gt;

&lt;p&gt;Active record he‚Äôs also touched in this chapter and with more detail the CRUD actions are explained, also, using like classes, order, limit, using the word keyword, joins coma scopes, writing your own SQL, What are the 16 call backs Rails includes.&lt;/p&gt;

&lt;p&gt;Action Pack lies at the heart of rails applications. It consists of three Ruby modules: action dispatch, action controller and action view. Action dispatch routes request to controllers. Action controller converts requests into responses. Action view is used by action controller to format those responses. Components such as action controller, action view, and active record handled the processing of request, and the rails environments needs them together into a coherent and easy to use whole.&lt;/p&gt;

&lt;p&gt;At its most basic, a web application accepts an incoming request from my browser, process it, and sends a response. The first question that springs to mind is, how does the application know what to do with the incoming request? A shopping cart application will receive requests to display a catalog, add items to a part, create an order, and so on. How does it route these requests to the appropriate code?
it turns out that Rails provides two ways to define how to route a request: a comprehensive way that you will use when you need to and a convenient way that you will generally use whenever you can.&lt;/p&gt;

&lt;p&gt;The comprehensive way lets you define a direct mapping of URLs to actions based on pattern matching, requirements and conditions. The convenient way lets you define routes based on resources, such as the models that you define. And because the convenient weight is built on the comprehensive way, you can freely mix and match the two approaches.&lt;/p&gt;

&lt;p&gt;A controller always responds to they use exactly one time per request. This means you should have just one call to a render(), redirect_to() or send() method in the processing of any request. Because the controller must respond exactly once, it checks to see whether a response has been generated just before it finishes handling a request. If not, the controller looks for a template named after the controller and action and automatically renders it. This is the most common way that rendering takes place. You may have noticed that in most of the actions north shopping cart tutorial we never explicitly rendered anything. Instead, or action methods set-up the context for the view and return. The controller notices that no rendering has taken place and automatically invokes the appropriate template.&lt;/p&gt;

&lt;p&gt;A real session is a hash-like structure that persists across request. Unlike raw cookies, sessions can hold any objects as long as those objects can be marshaled, which makes them ideal for holding state information in web applications.&lt;/p&gt;

&lt;p&gt;Rails encourages and agile, iterative style of development. We don‚Äôt expect to get everything right the first time period instead, we write tests and interact with our customer to refine our understanding as we go.&lt;/p&gt;

&lt;p&gt;For that to work, we need any supporting set of practices. We write tests to help us design our interfaces and to act as a safety net when we change things, and we use a version control to store our application source files, allowing us to undo mistakes and to monitor what changes day today.
The database schema in a rails application constantly evolves as we progress through the development column we add a table here, rename a column there, and so on the database changes in step with the applications code.&lt;/p&gt;

&lt;p&gt;With rails, each of those steps is made possible through the use of migration. A migration is simply a Ruby source file in your applications and You can modify column types, renaming columns, changing columns, defining indices, renaming tables, the usage of primary keys, and even using native SQL and always you can rollback their migrations when they go bad.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
</feed>
