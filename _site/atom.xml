<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dom Lizarraga</title>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2024-02-18T20:04:46-08:00</updated>
  <subtitle>Rails, Ruby, Hotwire, webapps</subtitle>
  <icon>http://localhost:4000/css/favicon.png</icon>
  <id>http://localhost:4000/</id>
  <author>
    <name>Dom Lizarraga</name>
    <email>dominiclizarraga@hotmail.com</email>
  </author>
  
  <entry>
    <title>Beginner guide to Docker üê≥</title>
    <link href="http://localhost:4000/2024/01/28/beginner-guide-docker.html"/>
    <updated>2024-01-28T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/28/beginner-guide-docker</id>
    <content type="html">&lt;p&gt;This is a guide to explore what is Docker and also when it‚Äôs useful.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Action policy gem + Cache</title>
    <link href="http://localhost:4000/2024/01/26/action-policy-cache.html"/>
    <updated>2024-01-26T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/26/action-policy-cache</id>
    <content type="html">&lt;p&gt;Recently I worked with an app that was usgin Action Policy, I noticed that those policies were being called everywhere! So I started a small research and found that there was a section for cache authorizations.&lt;/p&gt;

&lt;p&gt;Let‚Äôs dive in with Redis and how policies are saved in memory.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>When you see the `.count` in a Rails view üëÄ</title>
    <link href="http://localhost:4000/2024/01/22/when-you-see-the-count.html"/>
    <updated>2024-01-22T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/22/when-you-see-the-count</id>
    <content type="html">&lt;p&gt;I‚Äôve been working on improving the app performance and have learnt about how&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.count&lt;/code&gt;works and how it can slow down the app.&lt;/p&gt;

&lt;p&gt;As a solution we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_cache&lt;/code&gt;provided by default by rails and also something more advance like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;counter_culture&lt;/code&gt;gem!&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how it can improve you app as well!&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>The `where` clause in ActiveRecord</title>
    <link href="http://localhost:4000/2024/01/18/the-where-clause.html"/>
    <updated>2024-01-18T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/18/the-where-clause</id>
    <content type="html">&lt;p&gt;When optimizing an app I just learned to look at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.where&lt;/code&gt; because they can be potentially candidate for a associations preloading.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how it works.&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Key concepts for Redis and cache üíΩ</title>
    <link href="http://localhost:4000/2024/01/16/cache-and-redis.html"/>
    <updated>2024-01-16T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/16/cache-and-redis</id>
    <content type="html">&lt;p&gt;Expire&lt;/p&gt;

&lt;p&gt;Bust&lt;/p&gt;

&lt;p&gt;Cache hit&lt;/p&gt;

&lt;p&gt;Cache miss&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.touch&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Setting up redis in production since developers want a slower app in development&lt;/p&gt;

&lt;p&gt;rails dev:cache&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>What is cache? üíµ üí∞</title>
    <link href="http://localhost:4000/2024/01/14/what-is-cache.html"/>
    <updated>2024-01-14T00:00:00-08:00</updated>
    <id>http://localhost:4000/2024/01/14/what-is-cache</id>
    <content type="html">&lt;p&gt;Currently, I‚Äôm focusing on enhancing the performance of an application, and one of the key areas I‚Äôve explored in-depth is caching. Although I was aware of caching before, I didn‚Äôt fully grasp its concept or have the opportunity to apply it, so I never felt compelled to delve into it.&lt;/p&gt;

&lt;p&gt;If you find yourself in a similar position, here are some initial steps to build a strong understanding of caching :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is cache?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The term &lt;a href=&quot;https://dictionary.cambridge.org/us/dictionary/english/cache&quot;&gt;‚Äòcache‚Äô is an English word&lt;/a&gt; meaning a secure place where items are stored and hidden. Now this concept will make more sense in computing.&lt;/p&gt;

&lt;p&gt;Cache is a method of storing frequently accessed data in fast memory to keep it closer to the user.&lt;/p&gt;

&lt;p&gt;This fast memory can be found either on hard drives, processors (like CPUs and GPUs) or web browser, web server, databases, client-side, CDNs and it goes from KBs to MBs and in different layers (L1, L2, etc).&lt;/p&gt;

&lt;p&gt;In browser for example, the first time you visit a web site it will download the HTML, CSS and images then computer will save a copy of those files. The next time you visit that page, it will retrieve a local copy instead of requesting a web server, which speeds up the process.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;Think of a coffee shop where the barista keeps commonly used items like milk and sugar at hand, rather than going to the storage room for each order. This is like &apos;caching&apos;, where frequently used data is kept readily accessible. ‚òïÔ∏è&lt;/p&gt;

&lt;p&gt;Fun fact: The concept of caching was originally proposed in 1965 by Maurice Wilkes. &lt;a href=&quot;https://www.historyofinformation.com/detail.php?id=834&quot;&gt;Paper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When is it useful?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are 2 main ways so far to implement with Ruby on Rails app.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;HTTP Caching - Web browser can cache HTTP responses to enable faster retrieval data. It improves response time and reduce load on back-end. By storing copies of frequently accessed data, caching reduces the need for repeated requests to the server, thereby enhancing overall performance and user experience. (Mostly for Static assets and JSON APIs and AJAX endpoints.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This involves caching within the application itself and can be tailored to the specific needs of your Rails application. Rails provides several caching techniques like page caching, action caching, and fragment caching.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to use it in rails?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rails has 3 ways of caching data: page, action and fragment. Each of them has different purposes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://guides.rubyonrails.org/caching_with_rails.html#page-caching&quot;&gt;Page caching&lt;/a&gt; stores the entire HTML response, serving it directly from the web server without hitting the Rails stack.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://guides.rubyonrails.org/caching_with_rails.html#action-caching&quot;&gt;Action caching&lt;/a&gt; caches the output of controller actions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://guides.rubyonrails.org/caching_with_rails.html#fragment-caching&quot;&gt;Fragment caching&lt;/a&gt; is more granular and caches smaller pieces of a view.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also there are different techniques as well like Russian Doll Caching, Shared partial caching, Low-Level Caching and Key-based cache expiration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Extra tools you need. üõ†Ô∏è&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Rails caching is designed to be backend agnostic. This means you can implement custom caching solutions or adapters for other storage mechanisms.&lt;/p&gt;

&lt;p&gt;Redis: Advanced in-memory data store, supports complex structures, ensures data persistence, replication, and integrity.&lt;/p&gt;

&lt;p&gt;Memcached: Efficient, simple key-value store, ideal for caching static data, quick setup.&lt;/p&gt;

&lt;p&gt;Memory Store: Caches data in the Rails server‚Äôs memory. This is a good option for single-server setups and development environments.&lt;/p&gt;

&lt;p&gt;File Store: Caches data as files on the disk. This can be useful in environments where memory is limited.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is it truly beneficial for your App?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Currently in the implementation phase, the improvements are evident on the pages where it has been applied. It is advisable to compare response times before and after implementing these changes. If feasible, establish a Maximum Average Response Time (MART) as a benchmark.&lt;/p&gt;

&lt;p&gt;More when we complete this process!&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Product Focused Ruby - Kasper Timm Hansen.</title>
    <link href="http://localhost:4000/2023/12/17/kasper-product-focused-ruby.html"/>
    <updated>2023-12-17T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/17/kasper-product-focused-ruby</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Sketching and mental model of programming.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently attended a live session with Kasper Timm Hansen, he unfolded his approach to product-focused development, blending technical prowess with real-world problem solving.&lt;/p&gt;

&lt;p&gt;1st session notes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to start sketching out a new feature development.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.- Have a problem definition.&lt;/p&gt;

&lt;p&gt;2.- In a rails context, start with a controller and start figuring out how to pass stuff to the view (it will give you a lot of constraints already).&lt;/p&gt;

&lt;p&gt;3.- Then sketch stuff out like write methods that reflect ‚Äúcomplete‚Äù and ‚Äúuncomplete‚Äù (for a Todo app and task feature), don‚Äôt focus on assigning instance variables, inheritance of the controller (you save this for later).&lt;/p&gt;

&lt;p&gt;4.- At this point we have how routes are going to be. What are going to be the ‚Äúresources‚Äù are they going to be nested?&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;We have figured out the organizational stuff around things. So now we know how to put into business logic and complete it.&lt;/p&gt;

&lt;p&gt;5.- Take a break from it like an outside view of like, okay, can I name this differently because.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;So far, it&apos;s just more meant to have a direct communication with what I intend to code and my own mental model rather than the code that I&apos;m ending up generating.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;If the problem definition has a known unknown that would be one thing to start tackling, or it can help reveal unknown unknowns. And and then figure out, if it&apos;s something involved with like TCP connections, and we haven&apos;t worked with those before.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;Use method you know how they work to keep sketching things out (inheritance from ApplicationController or RESTful methods).&lt;/p&gt;

&lt;p&gt;6.- Delineate between what‚Äôs the feature, and what‚Äôs the architecture? User model would be architecture and User and its Invite (User::Invite) would be the feature.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;This prorcess should be really flexible, really fluid, like having a conversation and not to be attached to the code you&apos;ve written.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;Also play around with `irb`, read the Ruby docs and seek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Making abstractions by finding concepts through ‚Äònaming‚Äô.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.- Now that you have a sense of the concept and know how things fit together.&lt;/p&gt;

&lt;p&gt;2.- You can build solid blocks of knowledge that you can later use.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;In example, how a AssociationObject works and you find more similar cases in the rest of the app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2nd session notes (more hands-on):&lt;/p&gt;

&lt;p&gt;1.- At the very start of the feature cycle, what you essentially do is a deep dive. You try to keep going for about half an hour, maybe an hour and you‚Äôre just trying to fire off ideas.&lt;/p&gt;

&lt;p&gt;2.- Try to take full advantage of the fact that Ruby reads somewhat like pseudocode. It‚Äôs a case of ‚Äòfirst thought, best thought‚Äô, allowing for a more rapid-fire approach.&lt;/p&gt;

&lt;p&gt;3.- What you actually want is to quickly formulate a hypothesis. Figure out how to disprove or prove it, at least, and then keep making rapid changes.&lt;/p&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>How to quickly deep dive into a new code base.</title>
    <link href="http://localhost:4000/2023/12/14/how-to-explore-a-new-codebase.html"/>
    <updated>2023-12-14T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/14/how-to-explore-a-new-codebase</id>
    <content type="html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Utilize the user interface (UI) to create domain model objects (Posts, Books, Reservations, etc), followed by monitoring the server-side Rails logs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Examine the generated SQL and then directly access the database using either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psql&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails dbconsole&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read the Models file (book.rb), search for associations, callbacks, scopes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lastly look up the most recent record that has been saved or added to the database &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt; and play with it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Always have a question to solve in mind.</title>
    <link href="http://localhost:4000/2023/12/12/always-have-a-question-in-mind.html"/>
    <updated>2023-12-12T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/12/always-have-a-question-in-mind</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently explored a new code base, which was challenging, but focusing on a specific question helped me to direct my research more effectively‚Ä¶..&lt;/strong&gt;&lt;/p&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>N + 1 queries and how to fix them.</title>
    <link href="http://localhost:4000/2023/12/06/n-+-1-queries.html"/>
    <updated>2023-12-06T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/06/n-+-1-queries</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently had to deal with a n + 1 query‚Ä¶.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Firstly let‚Äôs understand why does this happen?&lt;/p&gt;

&lt;p&gt;Data to recreate a small excercise:&lt;/p&gt;

&lt;p&gt;Let‚Äôs create a small app so we can in detail what is being produced by each active record method.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Create app with name `preload_demo_app`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_demo_app&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Go to `preload_demo_app` dir&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_demo_app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then let‚Äôs create models and add the associations we need needed.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Create `Event` model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:datetime&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Create `Attendee` model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Attendee&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Create `Registration` model&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Registration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:references&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attendee&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:references&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Active Record Associations üëá&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# app/models/event.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:registrations&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:attendees&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :registrations&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# app/models/attendee.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Attendee&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:registrations&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;has_many&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;through: :registrations&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# app/models/registration.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Registration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:event&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;belongs_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:attendee&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With this in place we can start playing with the model by opening &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;joins&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;includes&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;preload&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eager_load&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Conclusion:&lt;/p&gt;

&lt;p&gt;So you need a sort at database level or just with ruby is enough?&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
</feed>
