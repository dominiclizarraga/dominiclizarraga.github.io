<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dom Lizarraga</title>
  <link href="http://localhost:4000/atom.xml" rel="self"/>
  <link href="http://localhost:4000/"/>
  <updated>2024-01-01T19:59:25-08:00</updated>
  <subtitle>Rails, Ruby, Hotwire, webapps</subtitle>
  <icon>http://localhost:4000/css/favicon.png</icon>
  <id>http://localhost:4000/</id>
  <author>
    <name>Dom Lizarraga</name>
    <email>dominiclizarraga@hotmail.com</email>
  </author>
  
  <entry>
    <title>Product Focused Ruby - Kasper Timm Hansen.</title>
    <link href="http://localhost:4000/2023/12/17/kasper-product-focused-ruby.html"/>
    <updated>2023-12-17T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/17/kasper-product-focused-ruby</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Sketching and mental model of programming.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I recently attended a live session with Kasper Timm Hansen, he unfolded his approach to product-focused development, blending technical prowess with real-world problem solving.&lt;/p&gt;

&lt;p&gt;1st session notes:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;How to start sketching out a new feature development.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.- Have a problem definition.&lt;/p&gt;

&lt;p&gt;2.- In a rails context, start with a controller and start figuring out how to pass stuff to the view (it will give you a lot of constraints already).&lt;/p&gt;

&lt;p&gt;3.- Then sketch stuff out like write methods that reflect ‚Äúcomplete‚Äù and ‚Äúuncomplete‚Äù (for a Todo app and task feature), don‚Äôt focus on assigning instance variables, inheritance of the controller (you save this for later).&lt;/p&gt;

&lt;p&gt;4.- At this point we have how routes are going to be. What are going to be the ‚Äúresources‚Äù are they going to be nested?&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;We have figured out the organizational stuff around things. So now we know how to put into business logic and complete it.&lt;/p&gt;

&lt;p&gt;5.- Take a break from it like an outside view of like, okay, can I name this differently because.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;So far, it&apos;s just more meant to have a direct communication with what I intend to code and my own mental model rather than the code that I&apos;m ending up generating.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;If the problem definition has a known unknown that would be one thing to start tackling, or it can help reveal unknown unknowns. And and then figure out, if it&apos;s something involved with like TCP connections, and we haven&apos;t worked with those before.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;Use method you know how they work to keep sketching things out (inheritance from ApplicationController or RESTful methods).&lt;/p&gt;

&lt;p&gt;6.- Delineate between what‚Äôs the feature, and what‚Äôs the architecture? User model would be architecture and User and its Invite (User::Invite) would be the feature.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;This prorcess should be really flexible, really fluid, like having a conversation and not to be attached to the code you&apos;ve written.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;Also play around with `irb`, read the Ruby docs and seek.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Making abstractions by finding concepts through ‚Äònaming‚Äô.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.- Now that you have a sense of the concept and know how things fit together.&lt;/p&gt;

&lt;p&gt;2.- You can build solid blocks of knowledge that you can later use.&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;In example, how a AssociationObject works and you find more similar cases in the rest of the app.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;2nd session notes (more hands-on):&lt;/p&gt;

&lt;p&gt;1.- At the very start of the feature cycle, what you essentially do is a deep dive. You try to keep going for about half an hour, maybe an hour, if you have something really good going or if you‚Äôre just trying to fire off ideas.&lt;/p&gt;

&lt;p&gt;2.- Try to take full advantage of the fact that Ruby reads somewhat like pseudocode. It‚Äôs a case of ‚Äòfirst thought, best thought‚Äô, allowing for a more rapid-fire approach.&lt;/p&gt;

&lt;p&gt;3.- What you actually want is to quickly formulate a hypothesis. Figure out how to disprove or prove it, at least, and then keep making rapid changes.&lt;/p&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>How to quickly deep dive into a new code base.</title>
    <link href="http://localhost:4000/2023/12/14/how-to-explore-a-new-codebase.html"/>
    <updated>2023-12-14T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/14/how-to-explore-a-new-codebase</id>
    <content type="html">&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Utilize the User interface to create domain model objects (post, books, etc), followed by monitoring the server-side Rails logs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Examine the generated SQL and then directly access the database using either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;psql&lt;/code&gt; or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails dbconsole&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lastly investigate the most recent record that has been saved or added to the database.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Always have a question to solve in mind.</title>
    <link href="http://localhost:4000/2023/12/12/always-have-a-question-in-mind.html"/>
    <updated>2023-12-12T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/12/always-have-a-question-in-mind</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently explored a new code base, which was challenging, but focusing on a specific question helped me to direct my research more effectively‚Ä¶..&lt;/strong&gt;&lt;/p&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>N + 1 queries</title>
    <link href="http://localhost:4000/2023/12/06/n-+-1-queries.html"/>
    <updated>2023-12-06T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/06/n-+-1-queries</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;I recently had to deal with a n + 1 query and delve into‚Ä¶.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So you need a sort at database level or just with ruby is enough?&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Debugging libraries for Ruby and Rails</title>
    <link href="http://localhost:4000/2023/12/01/debugging-libraries.html"/>
    <updated>2023-12-01T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/12/01/debugging-libraries</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;Exploring Ruby Debugging Tools&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Section 1: Pry &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;Pry GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Section 2: Pry-Rails &lt;a href=&quot;https://github.com/pry/pry-rails&quot;&gt;Pry-Rails GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Difference between ‚Äúpry‚Äù and ‚Äúpry-rails‚Äù (Stackoverflow response)[https://stackoverflow.com/questions/11709837/difference-between-pry-and-pry-rails#:~:text=The%20pry%2Drails%20gem%20simply,it%20just%20makes%20it%20easier.&amp;amp;text=How%20do%20I%20use%20pry%2Drails%20to%20debug%20Rails%20applications%3F]&lt;/p&gt;

&lt;p&gt;Section 3: Debug &lt;a href=&quot;https://github.com/ruby/debug&quot;&gt;Debug GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Section 4: Byebug &lt;a href=&quot;https://github.com/deivid-rodriguez/byebug&quot;&gt;Byebug GitHub&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>The Rails and Hotwire Codex üåÄ</title>
    <link href="http://localhost:4000/2023/11/21/hotwire-codex.html"/>
    <updated>2023-11-21T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/11/21/hotwire-codex</id>
    <content type="html">&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;p&gt;Turbo Native is the core of Hotwire‚Äôs native extensions. It orchestrates a &lt;strong&gt;native web view&lt;/strong&gt; through &lt;strong&gt;multiple screens&lt;/strong&gt; within native navigation. This way the app has a native feel, despite all the content being rendered using the same HTML views as the web app.&lt;/p&gt;

&lt;h3 id=&quot;native-navigation&quot;&gt;Native navigation&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Navigation in a Turbo Native app is completely native.&lt;/em&gt; When the user taps a link, a native method is called to handle the visit proposal. If a fully native screen is preferred for a given URL, this method is where that choice can be made.&lt;/p&gt;

&lt;p&gt;More commonly, we‚Äôll want to visit the destination URL. 1) When a link is tapped, 2) Turbo Native creates a new screen, 3) injects the web view into it, 4) drives the web view to the new location using Turbo, and 5) displays the screen to the user.&lt;/p&gt;

&lt;h3 id=&quot;authentication&quot;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;Turbo Native apps use &lt;strong&gt;cookie based authentication&lt;/strong&gt; for requests originating in a web view. If you have purely native screens and need to make HTTP requests from native code, you‚Äôll need to implement a form of token based authentication on the server.&lt;/p&gt;

&lt;h3 id=&quot;session&quot;&gt;Session&lt;/h3&gt;

&lt;p&gt;A session co-ordinates &lt;strong&gt;a single native web view.&lt;/strong&gt; It‚Äôs responsible for triggering URL visits using Turbo, and for inserting the web view into new screens when displayed to the user, we‚Äôll use a different session for each tab so the navigation in each tab is totally independent.&lt;/p&gt;

&lt;h3 id=&quot;path-configuration&quot;&gt;Path Configuration&lt;/h3&gt;

&lt;p&gt;The path configuration is a JSON file stored in the app bundle.&lt;/p&gt;

&lt;p&gt;This file specifies a set of rules that match URLs, using regex patterns, to a set of properties. These properties define how a URL should be displayed in the app. If a particular URL has a fully native screen, this is where we tell Turbo Native about that.&lt;/p&gt;

&lt;p&gt;Feature flags and other settings can also be defined making it simple to turn features on and off remotely.&lt;/p&gt;

&lt;p&gt;All of this content was taken from book below, they‚Äôre personal notes. I encourage you buy it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://railsandhotwirecodex.com/&quot;&gt;Book link is here.&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Shape up üé¢</title>
    <link href="http://localhost:4000/2023/11/08/shape-up.html"/>
    <updated>2023-11-08T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/11/08/shape-up</id>
    <content type="html">&lt;h2 id=&quot;shaping-up-methodology-notes&quot;&gt;Shaping Up Methodology Notes&lt;/h2&gt;

&lt;p&gt;These are some insights I‚Äôve gathered from the ‚ÄúShaping Up‚Äù methodology, which is neither Scrum nor dependent on Kanban boards.&lt;/p&gt;

&lt;h3 id=&quot;the-challenge-of-building-software&quot;&gt;The Challenge of Building Software&lt;/h3&gt;
&lt;p&gt;In the realm of software development, there‚Äôs a substantial element of the unknown, given that what we‚Äôre building hasn‚Äôt existed before. Waiting six months to realize we‚Äôre on the wrong path is excessively long, while a two-week span is typically too brief to produce anything substantial.&lt;/p&gt;

&lt;h3 id=&quot;the-solution-defining-scope-and-time&quot;&gt;The Solution: Defining Scope and Time&lt;/h3&gt;
&lt;p&gt;The solution lies in defining smaller projects that are actionable and testable. A period of six weeks is sufficient to both complete and deliver a project and short enough to allow for directional changes should they be necessary.&lt;/p&gt;

&lt;h4 id=&quot;key-idea-1-estimate-vs-appetite&quot;&gt;Key Idea #1: Estimate vs. Appetite&lt;/h4&gt;
&lt;p&gt;Instead of attaching a time estimate to a technical task, we should ask ourselves how much time we actually want to spend on this project. Consider the analogy of setting a budget before choosing a restaurant for dinner; it‚Äôs a strategic approach that takes into account the value, urgency, and business context.&lt;/p&gt;

&lt;p&gt;We should strive for an agreement between product teams and technical staff to ensure the time is fixed and the scope is adaptable.&lt;/p&gt;

&lt;h4 id=&quot;key-idea-2-shaping&quot;&gt;Key Idea #2: Shaping&lt;/h4&gt;
&lt;p&gt;‚ÄúShaping‚Äù considers two major questions about scope: ‚ÄúWhat is included?‚Äù and ‚ÄúWhat is excluded?‚Äù It also addresses the detail required upfront versus what can be delegated to the team to resolve later. ‚ÄúLatitude‚Äù refers to the level of freedom or specificity given to the team.&lt;/p&gt;

&lt;p&gt;A key part of shaping is the willingness to abandon features that are either technically impractical or not critical to the user interface.&lt;/p&gt;

&lt;h4 id=&quot;key-idea-3-autonomy&quot;&gt;Key Idea #3: Autonomy&lt;/h4&gt;
&lt;p&gt;Teams, consisting of two to three members, collaborate within a six-week cycle to deliver the complete project, not merely pieces of it. These teams maintain their focus without being burdened by unrelated tasks and are self-managed, operating at their own pace.&lt;/p&gt;

&lt;p&gt;Work is distinguished as either planned (strategic) or unplanned (reactive).&lt;/p&gt;

&lt;h3 id=&quot;further-learning&quot;&gt;Further Learning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=h_8M23wVjXk&quot;&gt;Shaping in a Nutshell&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mYbxQwQAkes&quot;&gt;Applying Shape Up in the Real World - Rails World 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Decompose for method calls</title>
    <link href="http://localhost:4000/2023/11/07/decompose-for-method-call.html"/>
    <updated>2023-11-07T00:00:00-08:00</updated>
    <id>http://localhost:4000/2023/11/07/decompose-for-method-call</id>
    <content type="html">&lt;p&gt;In Ruby, it is possible to &lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/syntax/assignment_rdoc.html#label-Array+Decomposition&quot;&gt;decompose the elements&lt;/a&gt; of arrays/hashes into distinct variables. Since values appear within arrays in a index order, they are unpacked into variables in the same order.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Decompose of an array&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; fruits &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;banana&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;cherry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x, y, z &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; fruits
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; x
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;apple&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case we are going to use &lt;em&gt;decompose&lt;/em&gt; for a method call, &lt;em&gt;(with arrays only one splat needed *)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def send_welcome_email&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name, email, signup_date&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Sending welcome email to: #{name}&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Email: #{email}&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Signed up on: #{signup_date}&quot;&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Array of user information&lt;/span&gt;
user_data &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Jane Doe&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;jane.doe@example.com&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;2023-04-01&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Using splat to pass an array of elements&lt;/span&gt;
send_welcome_email&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;user_data&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; üëà

&lt;span class=&quot;c&quot;&gt;# This code will output:&lt;/span&gt;
Sending welcome email to: Jane Doe
Email: jane.doe@example.com
Signed up on: 2023-04-01
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we are going to &lt;em&gt;decompose&lt;/em&gt; for a hash, &lt;em&gt;(two splats needed **)&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def configure_user&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;profile:, preferences:, settings:&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Configuring user profile:&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Profile: #{profile}&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Preferences: #{preferences}&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Settings: #{settings}&quot;&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Hash of user configuration&lt;/span&gt;
user_configuration &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  profile: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; username: &lt;span class=&quot;s1&quot;&gt;&apos;johndoe&apos;&lt;/span&gt;, language: &lt;span class=&quot;s1&quot;&gt;&apos;EN&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  preferences: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; theme: &lt;span class=&quot;s1&quot;&gt;&apos;dark&apos;&lt;/span&gt;, notifications: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  settings: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; privacy: &lt;span class=&quot;s1&quot;&gt;&apos;high&apos;&lt;/span&gt;, location: &lt;span class=&quot;s1&quot;&gt;&apos;off&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Using 2 splats to pass a hash&lt;/span&gt;
configure_user&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;user_configuration&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; üëà

&lt;span class=&quot;c&quot;&gt;# This code will output:&lt;/span&gt;
Configuring user profile:
Profile: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;:username&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;johndoe&quot;&lt;/span&gt;, :language&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EN&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Preferences: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;:theme&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dark&quot;&lt;/span&gt;, :notifications&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Settings: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;:privacy&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;high&quot;&lt;/span&gt;, :location&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;off&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Positional vs Keyword arguments</title>
    <link href="http://localhost:4000/2023/11/02/positional-vs-keyword-params.html"/>
    <updated>2023-11-02T00:00:00-07:00</updated>
    <id>http://localhost:4000/2023/11/02/positional-vs-keyword-params</id>
    <content type="html">&lt;p&gt;When I began programming, I was puzzled by why some parameters were named and others not. &lt;br /&gt;
Seeing &lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Array-2FHash+Argument&quot;&gt;*argument_name&lt;/a&gt; or &lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Keyword+Arguments&quot;&gt;**argument_name&lt;/a&gt; threw me for a loop. üò≥&lt;/p&gt;

&lt;p&gt;Here you‚Äôll find the definitive guide to understand both!&lt;/p&gt;

&lt;h2 id=&quot;positional-arguments&quot;&gt;Positional arguments&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# This method takes any number of user names as positional arguments. üôãüôã‚Äç‚ôÄÔ∏è&lt;/span&gt;
def greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  users.each &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |user| puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello, #{user}!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Passing individual user names to the method, which are packed into an array.&lt;/span&gt;
greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Carlos&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Outputs:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Alice!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Bob!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Carlos!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This method can take a variable number of fruit names. üçéüçå&lt;/span&gt;
def list_fruits&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;fruits&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  fruits.join&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;, &apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Passing a list of fruits to the method.&lt;/span&gt;
puts list_fruits&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apple&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Banana&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;Cherry&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Outputs: Apple, Banana, Cherry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;keyword-arguments&quot;&gt;Keyword arguments&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Usage of ** for keyword arguments: üôãüôã‚Äç‚ôÄÔ∏è&lt;/span&gt;
def greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  users.each &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; |identifier, user_info|
    puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello, #{user_info[:name]}!&quot;&lt;/span&gt;
  end
end

&lt;span class=&quot;c&quot;&gt;# Passing user details as keyword arguments.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The keys `:user1`, `:user2`, and `:user3` are identifiers for each user&apos;s hash.&lt;/span&gt;
greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  user1: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; name: &lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;, age: 30 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  user2: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; name: &lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;, age: 22 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  user3: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; name: &lt;span class=&quot;s2&quot;&gt;&quot;Carlos&quot;&lt;/span&gt;, age: 25 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Outputs:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Alice!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Bob!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Carlos!&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# This method takes a variable number of fruit names with details. üçéüçå&lt;/span&gt;
def list_fruits&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;fruits_with_details&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  fruits_with_details.map &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |fruit, color| &lt;span class=&quot;s2&quot;&gt;&quot;#{fruit}: #{color}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.join&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;, &apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Passing a hash of fruits with details to the method.&lt;/span&gt;
puts list_fruits&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Apple: &lt;span class=&quot;s2&quot;&gt;&quot;Green&quot;&lt;/span&gt;, Banana: &lt;span class=&quot;s2&quot;&gt;&quot;Yellow&quot;&lt;/span&gt;, Cherry: &lt;span class=&quot;s2&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Outputs: Apple: Green, Banana: Yellow, Cherry: Red&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# More real example of user attributes as keyword arguments.üôãüôã‚Äç‚ôÄÔ∏è&lt;/span&gt;
def create_user_profile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;**&lt;/span&gt;attributes&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Creating a profile for: #{attributes[:name]}&quot;&lt;/span&gt;
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Email: #{attributes[:email]}&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;attributes[:email]
  puts &lt;span class=&quot;s2&quot;&gt;&quot;Signup Date: #{attributes[:signup_date]}&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;attributes[:signup_date]
end

&lt;span class=&quot;c&quot;&gt;# Passing attributes as a hash, packed with a double splat.&lt;/span&gt;
create_user_profile&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name: &lt;span class=&quot;s2&quot;&gt;&quot;Jane Doe&quot;&lt;/span&gt;, email: &lt;span class=&quot;s2&quot;&gt;&quot;jane.doe@example.com&quot;&lt;/span&gt;, signup_date: &lt;span class=&quot;s2&quot;&gt;&quot;2023-04-01&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Outputs:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Creating a profile for: Jane Doe&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Email: jane.doe@example.com&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Signup Date: 2023-04-01&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;passing-objects-Ô∏è&quot;&gt;Passing objects üôãüôã‚Äç‚ôÄÔ∏è&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class User
  attr_reader :name

  def initialize&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    @name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; name
  end
end

&lt;span class=&quot;c&quot;&gt;# Create an array of User instances&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;
  User.new&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
  User.new&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Bob&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;,
  User.new&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Carlos&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Define the greet_users method to accept multiple user objects&lt;/span&gt;
def greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  users.each &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; |user| puts &lt;span class=&quot;s2&quot;&gt;&quot;Hello, #{user.name}!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
end

&lt;span class=&quot;c&quot;&gt;# Call greet_users with the array of User instances&lt;/span&gt;
greet_users&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Outputs:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Alice!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Bob!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Hello, Carlos&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you already have a hash with the appropriate keys, you can pass it to the method using the double splat operator **, which will convert the hash into keyword arguments.&lt;/p&gt;

&lt;p&gt;Docs for reference:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Array-2FHash+Argument&quot;&gt;*positional_argument&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.ruby-lang.org/en/3.1/syntax/methods_rdoc.html#label-Keyword+Arguments&quot;&gt;**keyword_argument&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
  <entry>
    <title>Latest tips &amp; tricks | Rails</title>
    <link href="http://localhost:4000/2023/10/26/lastest-tips-and-tricks.html"/>
    <updated>2023-10-26T00:00:00-07:00</updated>
    <id>http://localhost:4000/2023/10/26/lastest-tips-and-tricks</id>
    <content type="html">&lt;p&gt;first filter then map&lt;/p&gt;

&lt;p&gt;.all.each vs find_each&lt;/p&gt;

&lt;p&gt;size vs count vs length&lt;/p&gt;
</content>
    <author>
      <name>Dom Lizarraga</name>
      <uri>http://localhost:4000/about/</uri>
    </author>
  </entry>
  
</feed>
